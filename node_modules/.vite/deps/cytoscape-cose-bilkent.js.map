{
  "version": 3,
  "sources": ["../../layout-base/layout-base.js", "../../cose-base/cose-base.js", "../../cytoscape-cose-bilkent/cytoscape-cose-bilkent.js"],
  "sourcesContent": ["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"layoutBase\"] = factory();\n\telse\n\t\troot[\"layoutBase\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 26);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction LayoutConstants() {}\n\n/**\r\n * Layout Quality: 0:draft, 1:default, 2:proof\r\n */\nLayoutConstants.QUALITY = 1;\n\n/**\r\n * Default parameters\r\n */\nLayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED = false;\nLayoutConstants.DEFAULT_INCREMENTAL = false;\nLayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT = true;\nLayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT = false;\nLayoutConstants.DEFAULT_ANIMATION_PERIOD = 50;\nLayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES = false;\n\n// -----------------------------------------------------------------------------\n// Section: General other constants\n// -----------------------------------------------------------------------------\n/*\r\n * Margins of a graph to be applied on bouding rectangle of its contents. We\r\n * assume margins on all four sides to be uniform.\r\n */\nLayoutConstants.DEFAULT_GRAPH_MARGIN = 15;\n\n/*\r\n * Whether to consider labels in node dimensions or not\r\n */\nLayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = false;\n\n/*\r\n * Default dimension of a non-compound node.\r\n */\nLayoutConstants.SIMPLE_NODE_SIZE = 40;\n\n/*\r\n * Default dimension of a non-compound node.\r\n */\nLayoutConstants.SIMPLE_NODE_HALF_SIZE = LayoutConstants.SIMPLE_NODE_SIZE / 2;\n\n/*\r\n * Empty compound node size. When a compound node is empty, its both\r\n * dimensions should be of this value.\r\n */\nLayoutConstants.EMPTY_COMPOUND_NODE_SIZE = 40;\n\n/*\r\n * Minimum length that an edge should take during layout\r\n */\nLayoutConstants.MIN_EDGE_LENGTH = 1;\n\n/*\r\n * World boundaries that layout operates on\r\n */\nLayoutConstants.WORLD_BOUNDARY = 1000000;\n\n/*\r\n * World boundaries that random positioning can be performed with\r\n */\nLayoutConstants.INITIAL_WORLD_BOUNDARY = LayoutConstants.WORLD_BOUNDARY / 1000;\n\n/*\r\n * Coordinates of the world center\r\n */\nLayoutConstants.WORLD_CENTER_X = 1200;\nLayoutConstants.WORLD_CENTER_Y = 900;\n\nmodule.exports = LayoutConstants;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar LGraphObject = __webpack_require__(2);\nvar IGeometry = __webpack_require__(8);\nvar IMath = __webpack_require__(9);\n\nfunction LEdge(source, target, vEdge) {\n  LGraphObject.call(this, vEdge);\n\n  this.isOverlapingSourceAndTarget = false;\n  this.vGraphObject = vEdge;\n  this.bendpoints = [];\n  this.source = source;\n  this.target = target;\n}\n\nLEdge.prototype = Object.create(LGraphObject.prototype);\n\nfor (var prop in LGraphObject) {\n  LEdge[prop] = LGraphObject[prop];\n}\n\nLEdge.prototype.getSource = function () {\n  return this.source;\n};\n\nLEdge.prototype.getTarget = function () {\n  return this.target;\n};\n\nLEdge.prototype.isInterGraph = function () {\n  return this.isInterGraph;\n};\n\nLEdge.prototype.getLength = function () {\n  return this.length;\n};\n\nLEdge.prototype.isOverlapingSourceAndTarget = function () {\n  return this.isOverlapingSourceAndTarget;\n};\n\nLEdge.prototype.getBendpoints = function () {\n  return this.bendpoints;\n};\n\nLEdge.prototype.getLca = function () {\n  return this.lca;\n};\n\nLEdge.prototype.getSourceInLca = function () {\n  return this.sourceInLca;\n};\n\nLEdge.prototype.getTargetInLca = function () {\n  return this.targetInLca;\n};\n\nLEdge.prototype.getOtherEnd = function (node) {\n  if (this.source === node) {\n    return this.target;\n  } else if (this.target === node) {\n    return this.source;\n  } else {\n    throw \"Node is not incident with this edge\";\n  }\n};\n\nLEdge.prototype.getOtherEndInGraph = function (node, graph) {\n  var otherEnd = this.getOtherEnd(node);\n  var root = graph.getGraphManager().getRoot();\n\n  while (true) {\n    if (otherEnd.getOwner() == graph) {\n      return otherEnd;\n    }\n\n    if (otherEnd.getOwner() == root) {\n      break;\n    }\n\n    otherEnd = otherEnd.getOwner().getParent();\n  }\n\n  return null;\n};\n\nLEdge.prototype.updateLength = function () {\n  var clipPointCoordinates = new Array(4);\n\n  this.isOverlapingSourceAndTarget = IGeometry.getIntersection(this.target.getRect(), this.source.getRect(), clipPointCoordinates);\n\n  if (!this.isOverlapingSourceAndTarget) {\n    this.lengthX = clipPointCoordinates[0] - clipPointCoordinates[2];\n    this.lengthY = clipPointCoordinates[1] - clipPointCoordinates[3];\n\n    if (Math.abs(this.lengthX) < 1.0) {\n      this.lengthX = IMath.sign(this.lengthX);\n    }\n\n    if (Math.abs(this.lengthY) < 1.0) {\n      this.lengthY = IMath.sign(this.lengthY);\n    }\n\n    this.length = Math.sqrt(this.lengthX * this.lengthX + this.lengthY * this.lengthY);\n  }\n};\n\nLEdge.prototype.updateLengthSimple = function () {\n  this.lengthX = this.target.getCenterX() - this.source.getCenterX();\n  this.lengthY = this.target.getCenterY() - this.source.getCenterY();\n\n  if (Math.abs(this.lengthX) < 1.0) {\n    this.lengthX = IMath.sign(this.lengthX);\n  }\n\n  if (Math.abs(this.lengthY) < 1.0) {\n    this.lengthY = IMath.sign(this.lengthY);\n  }\n\n  this.length = Math.sqrt(this.lengthX * this.lengthX + this.lengthY * this.lengthY);\n};\n\nmodule.exports = LEdge;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction LGraphObject(vGraphObject) {\n  this.vGraphObject = vGraphObject;\n}\n\nmodule.exports = LGraphObject;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar LGraphObject = __webpack_require__(2);\nvar Integer = __webpack_require__(10);\nvar RectangleD = __webpack_require__(13);\nvar LayoutConstants = __webpack_require__(0);\nvar RandomSeed = __webpack_require__(16);\nvar PointD = __webpack_require__(4);\n\nfunction LNode(gm, loc, size, vNode) {\n  //Alternative constructor 1 : LNode(LGraphManager gm, Point loc, Dimension size, Object vNode)\n  if (size == null && vNode == null) {\n    vNode = loc;\n  }\n\n  LGraphObject.call(this, vNode);\n\n  //Alternative constructor 2 : LNode(Layout layout, Object vNode)\n  if (gm.graphManager != null) gm = gm.graphManager;\n\n  this.estimatedSize = Integer.MIN_VALUE;\n  this.inclusionTreeDepth = Integer.MAX_VALUE;\n  this.vGraphObject = vNode;\n  this.edges = [];\n  this.graphManager = gm;\n\n  if (size != null && loc != null) this.rect = new RectangleD(loc.x, loc.y, size.width, size.height);else this.rect = new RectangleD();\n}\n\nLNode.prototype = Object.create(LGraphObject.prototype);\nfor (var prop in LGraphObject) {\n  LNode[prop] = LGraphObject[prop];\n}\n\nLNode.prototype.getEdges = function () {\n  return this.edges;\n};\n\nLNode.prototype.getChild = function () {\n  return this.child;\n};\n\nLNode.prototype.getOwner = function () {\n  //  if (this.owner != null) {\n  //    if (!(this.owner == null || this.owner.getNodes().indexOf(this) > -1)) {\n  //      throw \"assert failed\";\n  //    }\n  //  }\n\n  return this.owner;\n};\n\nLNode.prototype.getWidth = function () {\n  return this.rect.width;\n};\n\nLNode.prototype.setWidth = function (width) {\n  this.rect.width = width;\n};\n\nLNode.prototype.getHeight = function () {\n  return this.rect.height;\n};\n\nLNode.prototype.setHeight = function (height) {\n  this.rect.height = height;\n};\n\nLNode.prototype.getCenterX = function () {\n  return this.rect.x + this.rect.width / 2;\n};\n\nLNode.prototype.getCenterY = function () {\n  return this.rect.y + this.rect.height / 2;\n};\n\nLNode.prototype.getCenter = function () {\n  return new PointD(this.rect.x + this.rect.width / 2, this.rect.y + this.rect.height / 2);\n};\n\nLNode.prototype.getLocation = function () {\n  return new PointD(this.rect.x, this.rect.y);\n};\n\nLNode.prototype.getRect = function () {\n  return this.rect;\n};\n\nLNode.prototype.getDiagonal = function () {\n  return Math.sqrt(this.rect.width * this.rect.width + this.rect.height * this.rect.height);\n};\n\n/**\n * This method returns half the diagonal length of this node.\n */\nLNode.prototype.getHalfTheDiagonal = function () {\n  return Math.sqrt(this.rect.height * this.rect.height + this.rect.width * this.rect.width) / 2;\n};\n\nLNode.prototype.setRect = function (upperLeft, dimension) {\n  this.rect.x = upperLeft.x;\n  this.rect.y = upperLeft.y;\n  this.rect.width = dimension.width;\n  this.rect.height = dimension.height;\n};\n\nLNode.prototype.setCenter = function (cx, cy) {\n  this.rect.x = cx - this.rect.width / 2;\n  this.rect.y = cy - this.rect.height / 2;\n};\n\nLNode.prototype.setLocation = function (x, y) {\n  this.rect.x = x;\n  this.rect.y = y;\n};\n\nLNode.prototype.moveBy = function (dx, dy) {\n  this.rect.x += dx;\n  this.rect.y += dy;\n};\n\nLNode.prototype.getEdgeListToNode = function (to) {\n  var edgeList = [];\n  var edge;\n  var self = this;\n\n  self.edges.forEach(function (edge) {\n\n    if (edge.target == to) {\n      if (edge.source != self) throw \"Incorrect edge source!\";\n\n      edgeList.push(edge);\n    }\n  });\n\n  return edgeList;\n};\n\nLNode.prototype.getEdgesBetween = function (other) {\n  var edgeList = [];\n  var edge;\n\n  var self = this;\n  self.edges.forEach(function (edge) {\n\n    if (!(edge.source == self || edge.target == self)) throw \"Incorrect edge source and/or target\";\n\n    if (edge.target == other || edge.source == other) {\n      edgeList.push(edge);\n    }\n  });\n\n  return edgeList;\n};\n\nLNode.prototype.getNeighborsList = function () {\n  var neighbors = new Set();\n\n  var self = this;\n  self.edges.forEach(function (edge) {\n\n    if (edge.source == self) {\n      neighbors.add(edge.target);\n    } else {\n      if (edge.target != self) {\n        throw \"Incorrect incidency!\";\n      }\n\n      neighbors.add(edge.source);\n    }\n  });\n\n  return neighbors;\n};\n\nLNode.prototype.withChildren = function () {\n  var withNeighborsList = new Set();\n  var childNode;\n  var children;\n\n  withNeighborsList.add(this);\n\n  if (this.child != null) {\n    var nodes = this.child.getNodes();\n    for (var i = 0; i < nodes.length; i++) {\n      childNode = nodes[i];\n      children = childNode.withChildren();\n      children.forEach(function (node) {\n        withNeighborsList.add(node);\n      });\n    }\n  }\n\n  return withNeighborsList;\n};\n\nLNode.prototype.getNoOfChildren = function () {\n  var noOfChildren = 0;\n  var childNode;\n\n  if (this.child == null) {\n    noOfChildren = 1;\n  } else {\n    var nodes = this.child.getNodes();\n    for (var i = 0; i < nodes.length; i++) {\n      childNode = nodes[i];\n\n      noOfChildren += childNode.getNoOfChildren();\n    }\n  }\n\n  if (noOfChildren == 0) {\n    noOfChildren = 1;\n  }\n  return noOfChildren;\n};\n\nLNode.prototype.getEstimatedSize = function () {\n  if (this.estimatedSize == Integer.MIN_VALUE) {\n    throw \"assert failed\";\n  }\n  return this.estimatedSize;\n};\n\nLNode.prototype.calcEstimatedSize = function () {\n  if (this.child == null) {\n    return this.estimatedSize = (this.rect.width + this.rect.height) / 2;\n  } else {\n    this.estimatedSize = this.child.calcEstimatedSize();\n    this.rect.width = this.estimatedSize;\n    this.rect.height = this.estimatedSize;\n\n    return this.estimatedSize;\n  }\n};\n\nLNode.prototype.scatter = function () {\n  var randomCenterX;\n  var randomCenterY;\n\n  var minX = -LayoutConstants.INITIAL_WORLD_BOUNDARY;\n  var maxX = LayoutConstants.INITIAL_WORLD_BOUNDARY;\n  randomCenterX = LayoutConstants.WORLD_CENTER_X + RandomSeed.nextDouble() * (maxX - minX) + minX;\n\n  var minY = -LayoutConstants.INITIAL_WORLD_BOUNDARY;\n  var maxY = LayoutConstants.INITIAL_WORLD_BOUNDARY;\n  randomCenterY = LayoutConstants.WORLD_CENTER_Y + RandomSeed.nextDouble() * (maxY - minY) + minY;\n\n  this.rect.x = randomCenterX;\n  this.rect.y = randomCenterY;\n};\n\nLNode.prototype.updateBounds = function () {\n  if (this.getChild() == null) {\n    throw \"assert failed\";\n  }\n  if (this.getChild().getNodes().length != 0) {\n    // wrap the children nodes by re-arranging the boundaries\n    var childGraph = this.getChild();\n    childGraph.updateBounds(true);\n\n    this.rect.x = childGraph.getLeft();\n    this.rect.y = childGraph.getTop();\n\n    this.setWidth(childGraph.getRight() - childGraph.getLeft());\n    this.setHeight(childGraph.getBottom() - childGraph.getTop());\n\n    // Update compound bounds considering its label properties    \n    if (LayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS) {\n\n      var width = childGraph.getRight() - childGraph.getLeft();\n      var height = childGraph.getBottom() - childGraph.getTop();\n\n      if (this.labelWidth > width) {\n        this.rect.x -= (this.labelWidth - width) / 2;\n        this.setWidth(this.labelWidth);\n      }\n\n      if (this.labelHeight > height) {\n        if (this.labelPos == \"center\") {\n          this.rect.y -= (this.labelHeight - height) / 2;\n        } else if (this.labelPos == \"top\") {\n          this.rect.y -= this.labelHeight - height;\n        }\n        this.setHeight(this.labelHeight);\n      }\n    }\n  }\n};\n\nLNode.prototype.getInclusionTreeDepth = function () {\n  if (this.inclusionTreeDepth == Integer.MAX_VALUE) {\n    throw \"assert failed\";\n  }\n  return this.inclusionTreeDepth;\n};\n\nLNode.prototype.transform = function (trans) {\n  var left = this.rect.x;\n\n  if (left > LayoutConstants.WORLD_BOUNDARY) {\n    left = LayoutConstants.WORLD_BOUNDARY;\n  } else if (left < -LayoutConstants.WORLD_BOUNDARY) {\n    left = -LayoutConstants.WORLD_BOUNDARY;\n  }\n\n  var top = this.rect.y;\n\n  if (top > LayoutConstants.WORLD_BOUNDARY) {\n    top = LayoutConstants.WORLD_BOUNDARY;\n  } else if (top < -LayoutConstants.WORLD_BOUNDARY) {\n    top = -LayoutConstants.WORLD_BOUNDARY;\n  }\n\n  var leftTop = new PointD(left, top);\n  var vLeftTop = trans.inverseTransformPoint(leftTop);\n\n  this.setLocation(vLeftTop.x, vLeftTop.y);\n};\n\nLNode.prototype.getLeft = function () {\n  return this.rect.x;\n};\n\nLNode.prototype.getRight = function () {\n  return this.rect.x + this.rect.width;\n};\n\nLNode.prototype.getTop = function () {\n  return this.rect.y;\n};\n\nLNode.prototype.getBottom = function () {\n  return this.rect.y + this.rect.height;\n};\n\nLNode.prototype.getParent = function () {\n  if (this.owner == null) {\n    return null;\n  }\n\n  return this.owner.getParent();\n};\n\nmodule.exports = LNode;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction PointD(x, y) {\n  if (x == null && y == null) {\n    this.x = 0;\n    this.y = 0;\n  } else {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nPointD.prototype.getX = function () {\n  return this.x;\n};\n\nPointD.prototype.getY = function () {\n  return this.y;\n};\n\nPointD.prototype.setX = function (x) {\n  this.x = x;\n};\n\nPointD.prototype.setY = function (y) {\n  this.y = y;\n};\n\nPointD.prototype.getDifference = function (pt) {\n  return new DimensionD(this.x - pt.x, this.y - pt.y);\n};\n\nPointD.prototype.getCopy = function () {\n  return new PointD(this.x, this.y);\n};\n\nPointD.prototype.translate = function (dim) {\n  this.x += dim.width;\n  this.y += dim.height;\n  return this;\n};\n\nmodule.exports = PointD;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar LGraphObject = __webpack_require__(2);\nvar Integer = __webpack_require__(10);\nvar LayoutConstants = __webpack_require__(0);\nvar LGraphManager = __webpack_require__(6);\nvar LNode = __webpack_require__(3);\nvar LEdge = __webpack_require__(1);\nvar RectangleD = __webpack_require__(13);\nvar Point = __webpack_require__(12);\nvar LinkedList = __webpack_require__(11);\n\nfunction LGraph(parent, obj2, vGraph) {\n  LGraphObject.call(this, vGraph);\n  this.estimatedSize = Integer.MIN_VALUE;\n  this.margin = LayoutConstants.DEFAULT_GRAPH_MARGIN;\n  this.edges = [];\n  this.nodes = [];\n  this.isConnected = false;\n  this.parent = parent;\n\n  if (obj2 != null && obj2 instanceof LGraphManager) {\n    this.graphManager = obj2;\n  } else if (obj2 != null && obj2 instanceof Layout) {\n    this.graphManager = obj2.graphManager;\n  }\n}\n\nLGraph.prototype = Object.create(LGraphObject.prototype);\nfor (var prop in LGraphObject) {\n  LGraph[prop] = LGraphObject[prop];\n}\n\nLGraph.prototype.getNodes = function () {\n  return this.nodes;\n};\n\nLGraph.prototype.getEdges = function () {\n  return this.edges;\n};\n\nLGraph.prototype.getGraphManager = function () {\n  return this.graphManager;\n};\n\nLGraph.prototype.getParent = function () {\n  return this.parent;\n};\n\nLGraph.prototype.getLeft = function () {\n  return this.left;\n};\n\nLGraph.prototype.getRight = function () {\n  return this.right;\n};\n\nLGraph.prototype.getTop = function () {\n  return this.top;\n};\n\nLGraph.prototype.getBottom = function () {\n  return this.bottom;\n};\n\nLGraph.prototype.isConnected = function () {\n  return this.isConnected;\n};\n\nLGraph.prototype.add = function (obj1, sourceNode, targetNode) {\n  if (sourceNode == null && targetNode == null) {\n    var newNode = obj1;\n    if (this.graphManager == null) {\n      throw \"Graph has no graph mgr!\";\n    }\n    if (this.getNodes().indexOf(newNode) > -1) {\n      throw \"Node already in graph!\";\n    }\n    newNode.owner = this;\n    this.getNodes().push(newNode);\n\n    return newNode;\n  } else {\n    var newEdge = obj1;\n    if (!(this.getNodes().indexOf(sourceNode) > -1 && this.getNodes().indexOf(targetNode) > -1)) {\n      throw \"Source or target not in graph!\";\n    }\n\n    if (!(sourceNode.owner == targetNode.owner && sourceNode.owner == this)) {\n      throw \"Both owners must be this graph!\";\n    }\n\n    if (sourceNode.owner != targetNode.owner) {\n      return null;\n    }\n\n    // set source and target\n    newEdge.source = sourceNode;\n    newEdge.target = targetNode;\n\n    // set as intra-graph edge\n    newEdge.isInterGraph = false;\n\n    // add to graph edge list\n    this.getEdges().push(newEdge);\n\n    // add to incidency lists\n    sourceNode.edges.push(newEdge);\n\n    if (targetNode != sourceNode) {\n      targetNode.edges.push(newEdge);\n    }\n\n    return newEdge;\n  }\n};\n\nLGraph.prototype.remove = function (obj) {\n  var node = obj;\n  if (obj instanceof LNode) {\n    if (node == null) {\n      throw \"Node is null!\";\n    }\n    if (!(node.owner != null && node.owner == this)) {\n      throw \"Owner graph is invalid!\";\n    }\n    if (this.graphManager == null) {\n      throw \"Owner graph manager is invalid!\";\n    }\n    // remove incident edges first (make a copy to do it safely)\n    var edgesToBeRemoved = node.edges.slice();\n    var edge;\n    var s = edgesToBeRemoved.length;\n    for (var i = 0; i < s; i++) {\n      edge = edgesToBeRemoved[i];\n\n      if (edge.isInterGraph) {\n        this.graphManager.remove(edge);\n      } else {\n        edge.source.owner.remove(edge);\n      }\n    }\n\n    // now the node itself\n    var index = this.nodes.indexOf(node);\n    if (index == -1) {\n      throw \"Node not in owner node list!\";\n    }\n\n    this.nodes.splice(index, 1);\n  } else if (obj instanceof LEdge) {\n    var edge = obj;\n    if (edge == null) {\n      throw \"Edge is null!\";\n    }\n    if (!(edge.source != null && edge.target != null)) {\n      throw \"Source and/or target is null!\";\n    }\n    if (!(edge.source.owner != null && edge.target.owner != null && edge.source.owner == this && edge.target.owner == this)) {\n      throw \"Source and/or target owner is invalid!\";\n    }\n\n    var sourceIndex = edge.source.edges.indexOf(edge);\n    var targetIndex = edge.target.edges.indexOf(edge);\n    if (!(sourceIndex > -1 && targetIndex > -1)) {\n      throw \"Source and/or target doesn't know this edge!\";\n    }\n\n    edge.source.edges.splice(sourceIndex, 1);\n\n    if (edge.target != edge.source) {\n      edge.target.edges.splice(targetIndex, 1);\n    }\n\n    var index = edge.source.owner.getEdges().indexOf(edge);\n    if (index == -1) {\n      throw \"Not in owner's edge list!\";\n    }\n\n    edge.source.owner.getEdges().splice(index, 1);\n  }\n};\n\nLGraph.prototype.updateLeftTop = function () {\n  var top = Integer.MAX_VALUE;\n  var left = Integer.MAX_VALUE;\n  var nodeTop;\n  var nodeLeft;\n  var margin;\n\n  var nodes = this.getNodes();\n  var s = nodes.length;\n\n  for (var i = 0; i < s; i++) {\n    var lNode = nodes[i];\n    nodeTop = lNode.getTop();\n    nodeLeft = lNode.getLeft();\n\n    if (top > nodeTop) {\n      top = nodeTop;\n    }\n\n    if (left > nodeLeft) {\n      left = nodeLeft;\n    }\n  }\n\n  // Do we have any nodes in this graph?\n  if (top == Integer.MAX_VALUE) {\n    return null;\n  }\n\n  if (nodes[0].getParent().paddingLeft != undefined) {\n    margin = nodes[0].getParent().paddingLeft;\n  } else {\n    margin = this.margin;\n  }\n\n  this.left = left - margin;\n  this.top = top - margin;\n\n  // Apply the margins and return the result\n  return new Point(this.left, this.top);\n};\n\nLGraph.prototype.updateBounds = function (recursive) {\n  // calculate bounds\n  var left = Integer.MAX_VALUE;\n  var right = -Integer.MAX_VALUE;\n  var top = Integer.MAX_VALUE;\n  var bottom = -Integer.MAX_VALUE;\n  var nodeLeft;\n  var nodeRight;\n  var nodeTop;\n  var nodeBottom;\n  var margin;\n\n  var nodes = this.nodes;\n  var s = nodes.length;\n  for (var i = 0; i < s; i++) {\n    var lNode = nodes[i];\n\n    if (recursive && lNode.child != null) {\n      lNode.updateBounds();\n    }\n    nodeLeft = lNode.getLeft();\n    nodeRight = lNode.getRight();\n    nodeTop = lNode.getTop();\n    nodeBottom = lNode.getBottom();\n\n    if (left > nodeLeft) {\n      left = nodeLeft;\n    }\n\n    if (right < nodeRight) {\n      right = nodeRight;\n    }\n\n    if (top > nodeTop) {\n      top = nodeTop;\n    }\n\n    if (bottom < nodeBottom) {\n      bottom = nodeBottom;\n    }\n  }\n\n  var boundingRect = new RectangleD(left, top, right - left, bottom - top);\n  if (left == Integer.MAX_VALUE) {\n    this.left = this.parent.getLeft();\n    this.right = this.parent.getRight();\n    this.top = this.parent.getTop();\n    this.bottom = this.parent.getBottom();\n  }\n\n  if (nodes[0].getParent().paddingLeft != undefined) {\n    margin = nodes[0].getParent().paddingLeft;\n  } else {\n    margin = this.margin;\n  }\n\n  this.left = boundingRect.x - margin;\n  this.right = boundingRect.x + boundingRect.width + margin;\n  this.top = boundingRect.y - margin;\n  this.bottom = boundingRect.y + boundingRect.height + margin;\n};\n\nLGraph.calculateBounds = function (nodes) {\n  var left = Integer.MAX_VALUE;\n  var right = -Integer.MAX_VALUE;\n  var top = Integer.MAX_VALUE;\n  var bottom = -Integer.MAX_VALUE;\n  var nodeLeft;\n  var nodeRight;\n  var nodeTop;\n  var nodeBottom;\n\n  var s = nodes.length;\n\n  for (var i = 0; i < s; i++) {\n    var lNode = nodes[i];\n    nodeLeft = lNode.getLeft();\n    nodeRight = lNode.getRight();\n    nodeTop = lNode.getTop();\n    nodeBottom = lNode.getBottom();\n\n    if (left > nodeLeft) {\n      left = nodeLeft;\n    }\n\n    if (right < nodeRight) {\n      right = nodeRight;\n    }\n\n    if (top > nodeTop) {\n      top = nodeTop;\n    }\n\n    if (bottom < nodeBottom) {\n      bottom = nodeBottom;\n    }\n  }\n\n  var boundingRect = new RectangleD(left, top, right - left, bottom - top);\n\n  return boundingRect;\n};\n\nLGraph.prototype.getInclusionTreeDepth = function () {\n  if (this == this.graphManager.getRoot()) {\n    return 1;\n  } else {\n    return this.parent.getInclusionTreeDepth();\n  }\n};\n\nLGraph.prototype.getEstimatedSize = function () {\n  if (this.estimatedSize == Integer.MIN_VALUE) {\n    throw \"assert failed\";\n  }\n  return this.estimatedSize;\n};\n\nLGraph.prototype.calcEstimatedSize = function () {\n  var size = 0;\n  var nodes = this.nodes;\n  var s = nodes.length;\n\n  for (var i = 0; i < s; i++) {\n    var lNode = nodes[i];\n    size += lNode.calcEstimatedSize();\n  }\n\n  if (size == 0) {\n    this.estimatedSize = LayoutConstants.EMPTY_COMPOUND_NODE_SIZE;\n  } else {\n    this.estimatedSize = size / Math.sqrt(this.nodes.length);\n  }\n\n  return this.estimatedSize;\n};\n\nLGraph.prototype.updateConnected = function () {\n  var self = this;\n  if (this.nodes.length == 0) {\n    this.isConnected = true;\n    return;\n  }\n\n  var queue = new LinkedList();\n  var visited = new Set();\n  var currentNode = this.nodes[0];\n  var neighborEdges;\n  var currentNeighbor;\n  var childrenOfNode = currentNode.withChildren();\n  childrenOfNode.forEach(function (node) {\n    queue.push(node);\n    visited.add(node);\n  });\n\n  while (queue.length !== 0) {\n    currentNode = queue.shift();\n\n    // Traverse all neighbors of this node\n    neighborEdges = currentNode.getEdges();\n    var size = neighborEdges.length;\n    for (var i = 0; i < size; i++) {\n      var neighborEdge = neighborEdges[i];\n      currentNeighbor = neighborEdge.getOtherEndInGraph(currentNode, this);\n\n      // Add unvisited neighbors to the list to visit\n      if (currentNeighbor != null && !visited.has(currentNeighbor)) {\n        var childrenOfNeighbor = currentNeighbor.withChildren();\n\n        childrenOfNeighbor.forEach(function (node) {\n          queue.push(node);\n          visited.add(node);\n        });\n      }\n    }\n  }\n\n  this.isConnected = false;\n\n  if (visited.size >= this.nodes.length) {\n    var noOfVisitedInThisGraph = 0;\n\n    visited.forEach(function (visitedNode) {\n      if (visitedNode.owner == self) {\n        noOfVisitedInThisGraph++;\n      }\n    });\n\n    if (noOfVisitedInThisGraph == this.nodes.length) {\n      this.isConnected = true;\n    }\n  }\n};\n\nmodule.exports = LGraph;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar LGraph;\nvar LEdge = __webpack_require__(1);\n\nfunction LGraphManager(layout) {\n  LGraph = __webpack_require__(5); // It may be better to initilize this out of this function but it gives an error (Right-hand side of 'instanceof' is not callable) now.\n  this.layout = layout;\n\n  this.graphs = [];\n  this.edges = [];\n}\n\nLGraphManager.prototype.addRoot = function () {\n  var ngraph = this.layout.newGraph();\n  var nnode = this.layout.newNode(null);\n  var root = this.add(ngraph, nnode);\n  this.setRootGraph(root);\n  return this.rootGraph;\n};\n\nLGraphManager.prototype.add = function (newGraph, parentNode, newEdge, sourceNode, targetNode) {\n  //there are just 2 parameters are passed then it adds an LGraph else it adds an LEdge\n  if (newEdge == null && sourceNode == null && targetNode == null) {\n    if (newGraph == null) {\n      throw \"Graph is null!\";\n    }\n    if (parentNode == null) {\n      throw \"Parent node is null!\";\n    }\n    if (this.graphs.indexOf(newGraph) > -1) {\n      throw \"Graph already in this graph mgr!\";\n    }\n\n    this.graphs.push(newGraph);\n\n    if (newGraph.parent != null) {\n      throw \"Already has a parent!\";\n    }\n    if (parentNode.child != null) {\n      throw \"Already has a child!\";\n    }\n\n    newGraph.parent = parentNode;\n    parentNode.child = newGraph;\n\n    return newGraph;\n  } else {\n    //change the order of the parameters\n    targetNode = newEdge;\n    sourceNode = parentNode;\n    newEdge = newGraph;\n    var sourceGraph = sourceNode.getOwner();\n    var targetGraph = targetNode.getOwner();\n\n    if (!(sourceGraph != null && sourceGraph.getGraphManager() == this)) {\n      throw \"Source not in this graph mgr!\";\n    }\n    if (!(targetGraph != null && targetGraph.getGraphManager() == this)) {\n      throw \"Target not in this graph mgr!\";\n    }\n\n    if (sourceGraph == targetGraph) {\n      newEdge.isInterGraph = false;\n      return sourceGraph.add(newEdge, sourceNode, targetNode);\n    } else {\n      newEdge.isInterGraph = true;\n\n      // set source and target\n      newEdge.source = sourceNode;\n      newEdge.target = targetNode;\n\n      // add edge to inter-graph edge list\n      if (this.edges.indexOf(newEdge) > -1) {\n        throw \"Edge already in inter-graph edge list!\";\n      }\n\n      this.edges.push(newEdge);\n\n      // add edge to source and target incidency lists\n      if (!(newEdge.source != null && newEdge.target != null)) {\n        throw \"Edge source and/or target is null!\";\n      }\n\n      if (!(newEdge.source.edges.indexOf(newEdge) == -1 && newEdge.target.edges.indexOf(newEdge) == -1)) {\n        throw \"Edge already in source and/or target incidency list!\";\n      }\n\n      newEdge.source.edges.push(newEdge);\n      newEdge.target.edges.push(newEdge);\n\n      return newEdge;\n    }\n  }\n};\n\nLGraphManager.prototype.remove = function (lObj) {\n  if (lObj instanceof LGraph) {\n    var graph = lObj;\n    if (graph.getGraphManager() != this) {\n      throw \"Graph not in this graph mgr\";\n    }\n    if (!(graph == this.rootGraph || graph.parent != null && graph.parent.graphManager == this)) {\n      throw \"Invalid parent node!\";\n    }\n\n    // first the edges (make a copy to do it safely)\n    var edgesToBeRemoved = [];\n\n    edgesToBeRemoved = edgesToBeRemoved.concat(graph.getEdges());\n\n    var edge;\n    var s = edgesToBeRemoved.length;\n    for (var i = 0; i < s; i++) {\n      edge = edgesToBeRemoved[i];\n      graph.remove(edge);\n    }\n\n    // then the nodes (make a copy to do it safely)\n    var nodesToBeRemoved = [];\n\n    nodesToBeRemoved = nodesToBeRemoved.concat(graph.getNodes());\n\n    var node;\n    s = nodesToBeRemoved.length;\n    for (var i = 0; i < s; i++) {\n      node = nodesToBeRemoved[i];\n      graph.remove(node);\n    }\n\n    // check if graph is the root\n    if (graph == this.rootGraph) {\n      this.setRootGraph(null);\n    }\n\n    // now remove the graph itself\n    var index = this.graphs.indexOf(graph);\n    this.graphs.splice(index, 1);\n\n    // also reset the parent of the graph\n    graph.parent = null;\n  } else if (lObj instanceof LEdge) {\n    edge = lObj;\n    if (edge == null) {\n      throw \"Edge is null!\";\n    }\n    if (!edge.isInterGraph) {\n      throw \"Not an inter-graph edge!\";\n    }\n    if (!(edge.source != null && edge.target != null)) {\n      throw \"Source and/or target is null!\";\n    }\n\n    // remove edge from source and target nodes' incidency lists\n\n    if (!(edge.source.edges.indexOf(edge) != -1 && edge.target.edges.indexOf(edge) != -1)) {\n      throw \"Source and/or target doesn't know this edge!\";\n    }\n\n    var index = edge.source.edges.indexOf(edge);\n    edge.source.edges.splice(index, 1);\n    index = edge.target.edges.indexOf(edge);\n    edge.target.edges.splice(index, 1);\n\n    // remove edge from owner graph manager's inter-graph edge list\n\n    if (!(edge.source.owner != null && edge.source.owner.getGraphManager() != null)) {\n      throw \"Edge owner graph or owner graph manager is null!\";\n    }\n    if (edge.source.owner.getGraphManager().edges.indexOf(edge) == -1) {\n      throw \"Not in owner graph manager's edge list!\";\n    }\n\n    var index = edge.source.owner.getGraphManager().edges.indexOf(edge);\n    edge.source.owner.getGraphManager().edges.splice(index, 1);\n  }\n};\n\nLGraphManager.prototype.updateBounds = function () {\n  this.rootGraph.updateBounds(true);\n};\n\nLGraphManager.prototype.getGraphs = function () {\n  return this.graphs;\n};\n\nLGraphManager.prototype.getAllNodes = function () {\n  if (this.allNodes == null) {\n    var nodeList = [];\n    var graphs = this.getGraphs();\n    var s = graphs.length;\n    for (var i = 0; i < s; i++) {\n      nodeList = nodeList.concat(graphs[i].getNodes());\n    }\n    this.allNodes = nodeList;\n  }\n  return this.allNodes;\n};\n\nLGraphManager.prototype.resetAllNodes = function () {\n  this.allNodes = null;\n};\n\nLGraphManager.prototype.resetAllEdges = function () {\n  this.allEdges = null;\n};\n\nLGraphManager.prototype.resetAllNodesToApplyGravitation = function () {\n  this.allNodesToApplyGravitation = null;\n};\n\nLGraphManager.prototype.getAllEdges = function () {\n  if (this.allEdges == null) {\n    var edgeList = [];\n    var graphs = this.getGraphs();\n    var s = graphs.length;\n    for (var i = 0; i < graphs.length; i++) {\n      edgeList = edgeList.concat(graphs[i].getEdges());\n    }\n\n    edgeList = edgeList.concat(this.edges);\n\n    this.allEdges = edgeList;\n  }\n  return this.allEdges;\n};\n\nLGraphManager.prototype.getAllNodesToApplyGravitation = function () {\n  return this.allNodesToApplyGravitation;\n};\n\nLGraphManager.prototype.setAllNodesToApplyGravitation = function (nodeList) {\n  if (this.allNodesToApplyGravitation != null) {\n    throw \"assert failed\";\n  }\n\n  this.allNodesToApplyGravitation = nodeList;\n};\n\nLGraphManager.prototype.getRoot = function () {\n  return this.rootGraph;\n};\n\nLGraphManager.prototype.setRootGraph = function (graph) {\n  if (graph.getGraphManager() != this) {\n    throw \"Root not in this graph mgr!\";\n  }\n\n  this.rootGraph = graph;\n  // root graph must have a root node associated with it for convenience\n  if (graph.parent == null) {\n    graph.parent = this.layout.newNode(\"Root node\");\n  }\n};\n\nLGraphManager.prototype.getLayout = function () {\n  return this.layout;\n};\n\nLGraphManager.prototype.isOneAncestorOfOther = function (firstNode, secondNode) {\n  if (!(firstNode != null && secondNode != null)) {\n    throw \"assert failed\";\n  }\n\n  if (firstNode == secondNode) {\n    return true;\n  }\n  // Is second node an ancestor of the first one?\n  var ownerGraph = firstNode.getOwner();\n  var parentNode;\n\n  do {\n    parentNode = ownerGraph.getParent();\n\n    if (parentNode == null) {\n      break;\n    }\n\n    if (parentNode == secondNode) {\n      return true;\n    }\n\n    ownerGraph = parentNode.getOwner();\n    if (ownerGraph == null) {\n      break;\n    }\n  } while (true);\n  // Is first node an ancestor of the second one?\n  ownerGraph = secondNode.getOwner();\n\n  do {\n    parentNode = ownerGraph.getParent();\n\n    if (parentNode == null) {\n      break;\n    }\n\n    if (parentNode == firstNode) {\n      return true;\n    }\n\n    ownerGraph = parentNode.getOwner();\n    if (ownerGraph == null) {\n      break;\n    }\n  } while (true);\n\n  return false;\n};\n\nLGraphManager.prototype.calcLowestCommonAncestors = function () {\n  var edge;\n  var sourceNode;\n  var targetNode;\n  var sourceAncestorGraph;\n  var targetAncestorGraph;\n\n  var edges = this.getAllEdges();\n  var s = edges.length;\n  for (var i = 0; i < s; i++) {\n    edge = edges[i];\n\n    sourceNode = edge.source;\n    targetNode = edge.target;\n    edge.lca = null;\n    edge.sourceInLca = sourceNode;\n    edge.targetInLca = targetNode;\n\n    if (sourceNode == targetNode) {\n      edge.lca = sourceNode.getOwner();\n      continue;\n    }\n\n    sourceAncestorGraph = sourceNode.getOwner();\n\n    while (edge.lca == null) {\n      edge.targetInLca = targetNode;\n      targetAncestorGraph = targetNode.getOwner();\n\n      while (edge.lca == null) {\n        if (targetAncestorGraph == sourceAncestorGraph) {\n          edge.lca = targetAncestorGraph;\n          break;\n        }\n\n        if (targetAncestorGraph == this.rootGraph) {\n          break;\n        }\n\n        if (edge.lca != null) {\n          throw \"assert failed\";\n        }\n        edge.targetInLca = targetAncestorGraph.getParent();\n        targetAncestorGraph = edge.targetInLca.getOwner();\n      }\n\n      if (sourceAncestorGraph == this.rootGraph) {\n        break;\n      }\n\n      if (edge.lca == null) {\n        edge.sourceInLca = sourceAncestorGraph.getParent();\n        sourceAncestorGraph = edge.sourceInLca.getOwner();\n      }\n    }\n\n    if (edge.lca == null) {\n      throw \"assert failed\";\n    }\n  }\n};\n\nLGraphManager.prototype.calcLowestCommonAncestor = function (firstNode, secondNode) {\n  if (firstNode == secondNode) {\n    return firstNode.getOwner();\n  }\n  var firstOwnerGraph = firstNode.getOwner();\n\n  do {\n    if (firstOwnerGraph == null) {\n      break;\n    }\n    var secondOwnerGraph = secondNode.getOwner();\n\n    do {\n      if (secondOwnerGraph == null) {\n        break;\n      }\n\n      if (secondOwnerGraph == firstOwnerGraph) {\n        return secondOwnerGraph;\n      }\n      secondOwnerGraph = secondOwnerGraph.getParent().getOwner();\n    } while (true);\n\n    firstOwnerGraph = firstOwnerGraph.getParent().getOwner();\n  } while (true);\n\n  return firstOwnerGraph;\n};\n\nLGraphManager.prototype.calcInclusionTreeDepths = function (graph, depth) {\n  if (graph == null && depth == null) {\n    graph = this.rootGraph;\n    depth = 1;\n  }\n  var node;\n\n  var nodes = graph.getNodes();\n  var s = nodes.length;\n  for (var i = 0; i < s; i++) {\n    node = nodes[i];\n    node.inclusionTreeDepth = depth;\n\n    if (node.child != null) {\n      this.calcInclusionTreeDepths(node.child, depth + 1);\n    }\n  }\n};\n\nLGraphManager.prototype.includesInvalidEdge = function () {\n  var edge;\n\n  var s = this.edges.length;\n  for (var i = 0; i < s; i++) {\n    edge = this.edges[i];\n\n    if (this.isOneAncestorOfOther(edge.source, edge.target)) {\n      return true;\n    }\n  }\n  return false;\n};\n\nmodule.exports = LGraphManager;\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar LayoutConstants = __webpack_require__(0);\n\nfunction FDLayoutConstants() {}\n\n//FDLayoutConstants inherits static props in LayoutConstants\nfor (var prop in LayoutConstants) {\n  FDLayoutConstants[prop] = LayoutConstants[prop];\n}\n\nFDLayoutConstants.MAX_ITERATIONS = 2500;\n\nFDLayoutConstants.DEFAULT_EDGE_LENGTH = 50;\nFDLayoutConstants.DEFAULT_SPRING_STRENGTH = 0.45;\nFDLayoutConstants.DEFAULT_REPULSION_STRENGTH = 4500.0;\nFDLayoutConstants.DEFAULT_GRAVITY_STRENGTH = 0.4;\nFDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = 1.0;\nFDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR = 3.8;\nFDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = 1.5;\nFDLayoutConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION = true;\nFDLayoutConstants.DEFAULT_USE_SMART_REPULSION_RANGE_CALCULATION = true;\nFDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = 0.3;\nFDLayoutConstants.COOLING_ADAPTATION_FACTOR = 0.33;\nFDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT = 1000;\nFDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT = 5000;\nFDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL = 100.0;\nFDLayoutConstants.MAX_NODE_DISPLACEMENT = FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL * 3;\nFDLayoutConstants.MIN_REPULSION_DIST = FDLayoutConstants.DEFAULT_EDGE_LENGTH / 10.0;\nFDLayoutConstants.CONVERGENCE_CHECK_PERIOD = 100;\nFDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = 0.1;\nFDLayoutConstants.MIN_EDGE_LENGTH = 1;\nFDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD = 10;\n\nmodule.exports = FDLayoutConstants;\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/**\n * This class maintains a list of static geometry related utility methods.\n *\n *\n * Copyright: i-Vis Research Group, Bilkent University, 2007 - present\n */\n\nvar Point = __webpack_require__(12);\n\nfunction IGeometry() {}\n\n/**\n * This method calculates *half* the amount in x and y directions of the two\n * input rectangles needed to separate them keeping their respective\n * positioning, and returns the result in the input array. An input\n * separation buffer added to the amount in both directions. We assume that\n * the two rectangles do intersect.\n */\nIGeometry.calcSeparationAmount = function (rectA, rectB, overlapAmount, separationBuffer) {\n  if (!rectA.intersects(rectB)) {\n    throw \"assert failed\";\n  }\n\n  var directions = new Array(2);\n\n  this.decideDirectionsForOverlappingNodes(rectA, rectB, directions);\n\n  overlapAmount[0] = Math.min(rectA.getRight(), rectB.getRight()) - Math.max(rectA.x, rectB.x);\n  overlapAmount[1] = Math.min(rectA.getBottom(), rectB.getBottom()) - Math.max(rectA.y, rectB.y);\n\n  // update the overlapping amounts for the following cases:\n  if (rectA.getX() <= rectB.getX() && rectA.getRight() >= rectB.getRight()) {\n    /* Case x.1:\n    *\n    * rectA\n    * \t|                       |\n    * \t|        _________      |\n    * \t|        |       |      |\n    * \t|________|_______|______|\n    * \t\t\t |       |\n    *           |       |\n    *        rectB\n    */\n    overlapAmount[0] += Math.min(rectB.getX() - rectA.getX(), rectA.getRight() - rectB.getRight());\n  } else if (rectB.getX() <= rectA.getX() && rectB.getRight() >= rectA.getRight()) {\n    /* Case x.2:\n    *\n    * rectB\n    * \t|                       |\n    * \t|        _________      |\n    * \t|        |       |      |\n    * \t|________|_______|______|\n    * \t\t\t |       |\n    *           |       |\n    *        rectA\n    */\n    overlapAmount[0] += Math.min(rectA.getX() - rectB.getX(), rectB.getRight() - rectA.getRight());\n  }\n  if (rectA.getY() <= rectB.getY() && rectA.getBottom() >= rectB.getBottom()) {\n    /* Case y.1:\n     *          ________ rectA\n     *         |\n     *         |\n     *   ______|____  rectB\n     *         |    |\n     *         |    |\n     *   ______|____|\n     *         |\n     *         |\n     *         |________\n     *\n     */\n    overlapAmount[1] += Math.min(rectB.getY() - rectA.getY(), rectA.getBottom() - rectB.getBottom());\n  } else if (rectB.getY() <= rectA.getY() && rectB.getBottom() >= rectA.getBottom()) {\n    /* Case y.2:\n    *          ________ rectB\n    *         |\n    *         |\n    *   ______|____  rectA\n    *         |    |\n    *         |    |\n    *   ______|____|\n    *         |\n    *         |\n    *         |________\n    *\n    */\n    overlapAmount[1] += Math.min(rectA.getY() - rectB.getY(), rectB.getBottom() - rectA.getBottom());\n  }\n\n  // find slope of the line passes two centers\n  var slope = Math.abs((rectB.getCenterY() - rectA.getCenterY()) / (rectB.getCenterX() - rectA.getCenterX()));\n  // if centers are overlapped\n  if (rectB.getCenterY() === rectA.getCenterY() && rectB.getCenterX() === rectA.getCenterX()) {\n    // assume the slope is 1 (45 degree)\n    slope = 1.0;\n  }\n\n  var moveByY = slope * overlapAmount[0];\n  var moveByX = overlapAmount[1] / slope;\n  if (overlapAmount[0] < moveByX) {\n    moveByX = overlapAmount[0];\n  } else {\n    moveByY = overlapAmount[1];\n  }\n  // return half the amount so that if each rectangle is moved by these\n  // amounts in opposite directions, overlap will be resolved\n  overlapAmount[0] = -1 * directions[0] * (moveByX / 2 + separationBuffer);\n  overlapAmount[1] = -1 * directions[1] * (moveByY / 2 + separationBuffer);\n};\n\n/**\n * This method decides the separation direction of overlapping nodes\n *\n * if directions[0] = -1, then rectA goes left\n * if directions[0] = 1,  then rectA goes right\n * if directions[1] = -1, then rectA goes up\n * if directions[1] = 1,  then rectA goes down\n */\nIGeometry.decideDirectionsForOverlappingNodes = function (rectA, rectB, directions) {\n  if (rectA.getCenterX() < rectB.getCenterX()) {\n    directions[0] = -1;\n  } else {\n    directions[0] = 1;\n  }\n\n  if (rectA.getCenterY() < rectB.getCenterY()) {\n    directions[1] = -1;\n  } else {\n    directions[1] = 1;\n  }\n};\n\n/**\n * This method calculates the intersection (clipping) points of the two\n * input rectangles with line segment defined by the centers of these two\n * rectangles. The clipping points are saved in the input double array and\n * whether or not the two rectangles overlap is returned.\n */\nIGeometry.getIntersection2 = function (rectA, rectB, result) {\n  //result[0-1] will contain clipPoint of rectA, result[2-3] will contain clipPoint of rectB\n  var p1x = rectA.getCenterX();\n  var p1y = rectA.getCenterY();\n  var p2x = rectB.getCenterX();\n  var p2y = rectB.getCenterY();\n\n  //if two rectangles intersect, then clipping points are centers\n  if (rectA.intersects(rectB)) {\n    result[0] = p1x;\n    result[1] = p1y;\n    result[2] = p2x;\n    result[3] = p2y;\n    return true;\n  }\n  //variables for rectA\n  var topLeftAx = rectA.getX();\n  var topLeftAy = rectA.getY();\n  var topRightAx = rectA.getRight();\n  var bottomLeftAx = rectA.getX();\n  var bottomLeftAy = rectA.getBottom();\n  var bottomRightAx = rectA.getRight();\n  var halfWidthA = rectA.getWidthHalf();\n  var halfHeightA = rectA.getHeightHalf();\n  //variables for rectB\n  var topLeftBx = rectB.getX();\n  var topLeftBy = rectB.getY();\n  var topRightBx = rectB.getRight();\n  var bottomLeftBx = rectB.getX();\n  var bottomLeftBy = rectB.getBottom();\n  var bottomRightBx = rectB.getRight();\n  var halfWidthB = rectB.getWidthHalf();\n  var halfHeightB = rectB.getHeightHalf();\n\n  //flag whether clipping points are found\n  var clipPointAFound = false;\n  var clipPointBFound = false;\n\n  // line is vertical\n  if (p1x === p2x) {\n    if (p1y > p2y) {\n      result[0] = p1x;\n      result[1] = topLeftAy;\n      result[2] = p2x;\n      result[3] = bottomLeftBy;\n      return false;\n    } else if (p1y < p2y) {\n      result[0] = p1x;\n      result[1] = bottomLeftAy;\n      result[2] = p2x;\n      result[3] = topLeftBy;\n      return false;\n    } else {\n      //not line, return null;\n    }\n  }\n  // line is horizontal\n  else if (p1y === p2y) {\n      if (p1x > p2x) {\n        result[0] = topLeftAx;\n        result[1] = p1y;\n        result[2] = topRightBx;\n        result[3] = p2y;\n        return false;\n      } else if (p1x < p2x) {\n        result[0] = topRightAx;\n        result[1] = p1y;\n        result[2] = topLeftBx;\n        result[3] = p2y;\n        return false;\n      } else {\n        //not valid line, return null;\n      }\n    } else {\n      //slopes of rectA's and rectB's diagonals\n      var slopeA = rectA.height / rectA.width;\n      var slopeB = rectB.height / rectB.width;\n\n      //slope of line between center of rectA and center of rectB\n      var slopePrime = (p2y - p1y) / (p2x - p1x);\n      var cardinalDirectionA = void 0;\n      var cardinalDirectionB = void 0;\n      var tempPointAx = void 0;\n      var tempPointAy = void 0;\n      var tempPointBx = void 0;\n      var tempPointBy = void 0;\n\n      //determine whether clipping point is the corner of nodeA\n      if (-slopeA === slopePrime) {\n        if (p1x > p2x) {\n          result[0] = bottomLeftAx;\n          result[1] = bottomLeftAy;\n          clipPointAFound = true;\n        } else {\n          result[0] = topRightAx;\n          result[1] = topLeftAy;\n          clipPointAFound = true;\n        }\n      } else if (slopeA === slopePrime) {\n        if (p1x > p2x) {\n          result[0] = topLeftAx;\n          result[1] = topLeftAy;\n          clipPointAFound = true;\n        } else {\n          result[0] = bottomRightAx;\n          result[1] = bottomLeftAy;\n          clipPointAFound = true;\n        }\n      }\n\n      //determine whether clipping point is the corner of nodeB\n      if (-slopeB === slopePrime) {\n        if (p2x > p1x) {\n          result[2] = bottomLeftBx;\n          result[3] = bottomLeftBy;\n          clipPointBFound = true;\n        } else {\n          result[2] = topRightBx;\n          result[3] = topLeftBy;\n          clipPointBFound = true;\n        }\n      } else if (slopeB === slopePrime) {\n        if (p2x > p1x) {\n          result[2] = topLeftBx;\n          result[3] = topLeftBy;\n          clipPointBFound = true;\n        } else {\n          result[2] = bottomRightBx;\n          result[3] = bottomLeftBy;\n          clipPointBFound = true;\n        }\n      }\n\n      //if both clipping points are corners\n      if (clipPointAFound && clipPointBFound) {\n        return false;\n      }\n\n      //determine Cardinal Direction of rectangles\n      if (p1x > p2x) {\n        if (p1y > p2y) {\n          cardinalDirectionA = this.getCardinalDirection(slopeA, slopePrime, 4);\n          cardinalDirectionB = this.getCardinalDirection(slopeB, slopePrime, 2);\n        } else {\n          cardinalDirectionA = this.getCardinalDirection(-slopeA, slopePrime, 3);\n          cardinalDirectionB = this.getCardinalDirection(-slopeB, slopePrime, 1);\n        }\n      } else {\n        if (p1y > p2y) {\n          cardinalDirectionA = this.getCardinalDirection(-slopeA, slopePrime, 1);\n          cardinalDirectionB = this.getCardinalDirection(-slopeB, slopePrime, 3);\n        } else {\n          cardinalDirectionA = this.getCardinalDirection(slopeA, slopePrime, 2);\n          cardinalDirectionB = this.getCardinalDirection(slopeB, slopePrime, 4);\n        }\n      }\n      //calculate clipping Point if it is not found before\n      if (!clipPointAFound) {\n        switch (cardinalDirectionA) {\n          case 1:\n            tempPointAy = topLeftAy;\n            tempPointAx = p1x + -halfHeightA / slopePrime;\n            result[0] = tempPointAx;\n            result[1] = tempPointAy;\n            break;\n          case 2:\n            tempPointAx = bottomRightAx;\n            tempPointAy = p1y + halfWidthA * slopePrime;\n            result[0] = tempPointAx;\n            result[1] = tempPointAy;\n            break;\n          case 3:\n            tempPointAy = bottomLeftAy;\n            tempPointAx = p1x + halfHeightA / slopePrime;\n            result[0] = tempPointAx;\n            result[1] = tempPointAy;\n            break;\n          case 4:\n            tempPointAx = bottomLeftAx;\n            tempPointAy = p1y + -halfWidthA * slopePrime;\n            result[0] = tempPointAx;\n            result[1] = tempPointAy;\n            break;\n        }\n      }\n      if (!clipPointBFound) {\n        switch (cardinalDirectionB) {\n          case 1:\n            tempPointBy = topLeftBy;\n            tempPointBx = p2x + -halfHeightB / slopePrime;\n            result[2] = tempPointBx;\n            result[3] = tempPointBy;\n            break;\n          case 2:\n            tempPointBx = bottomRightBx;\n            tempPointBy = p2y + halfWidthB * slopePrime;\n            result[2] = tempPointBx;\n            result[3] = tempPointBy;\n            break;\n          case 3:\n            tempPointBy = bottomLeftBy;\n            tempPointBx = p2x + halfHeightB / slopePrime;\n            result[2] = tempPointBx;\n            result[3] = tempPointBy;\n            break;\n          case 4:\n            tempPointBx = bottomLeftBx;\n            tempPointBy = p2y + -halfWidthB * slopePrime;\n            result[2] = tempPointBx;\n            result[3] = tempPointBy;\n            break;\n        }\n      }\n    }\n  return false;\n};\n\n/**\n * This method returns in which cardinal direction does input point stays\n * 1: North\n * 2: East\n * 3: South\n * 4: West\n */\nIGeometry.getCardinalDirection = function (slope, slopePrime, line) {\n  if (slope > slopePrime) {\n    return line;\n  } else {\n    return 1 + line % 4;\n  }\n};\n\n/**\n * This method calculates the intersection of the two lines defined by\n * point pairs (s1,s2) and (f1,f2).\n */\nIGeometry.getIntersection = function (s1, s2, f1, f2) {\n  if (f2 == null) {\n    return this.getIntersection2(s1, s2, f1);\n  }\n\n  var x1 = s1.x;\n  var y1 = s1.y;\n  var x2 = s2.x;\n  var y2 = s2.y;\n  var x3 = f1.x;\n  var y3 = f1.y;\n  var x4 = f2.x;\n  var y4 = f2.y;\n  var x = void 0,\n      y = void 0; // intersection point\n  var a1 = void 0,\n      a2 = void 0,\n      b1 = void 0,\n      b2 = void 0,\n      c1 = void 0,\n      c2 = void 0; // coefficients of line eqns.\n  var denom = void 0;\n\n  a1 = y2 - y1;\n  b1 = x1 - x2;\n  c1 = x2 * y1 - x1 * y2; // { a1*x + b1*y + c1 = 0 is line 1 }\n\n  a2 = y4 - y3;\n  b2 = x3 - x4;\n  c2 = x4 * y3 - x3 * y4; // { a2*x + b2*y + c2 = 0 is line 2 }\n\n  denom = a1 * b2 - a2 * b1;\n\n  if (denom === 0) {\n    return null;\n  }\n\n  x = (b1 * c2 - b2 * c1) / denom;\n  y = (a2 * c1 - a1 * c2) / denom;\n\n  return new Point(x, y);\n};\n\n/**\n * This method finds and returns the angle of the vector from the + x-axis\n * in clockwise direction (compatible w/ Java coordinate system!).\n */\nIGeometry.angleOfVector = function (Cx, Cy, Nx, Ny) {\n  var C_angle = void 0;\n\n  if (Cx !== Nx) {\n    C_angle = Math.atan((Ny - Cy) / (Nx - Cx));\n\n    if (Nx < Cx) {\n      C_angle += Math.PI;\n    } else if (Ny < Cy) {\n      C_angle += this.TWO_PI;\n    }\n  } else if (Ny < Cy) {\n    C_angle = this.ONE_AND_HALF_PI; // 270 degrees\n  } else {\n    C_angle = this.HALF_PI; // 90 degrees\n  }\n\n  return C_angle;\n};\n\n/**\n * This method checks whether the given two line segments (one with point\n * p1 and p2, the other with point p3 and p4) intersect at a point other\n * than these points.\n */\nIGeometry.doIntersect = function (p1, p2, p3, p4) {\n  var a = p1.x;\n  var b = p1.y;\n  var c = p2.x;\n  var d = p2.y;\n  var p = p3.x;\n  var q = p3.y;\n  var r = p4.x;\n  var s = p4.y;\n  var det = (c - a) * (s - q) - (r - p) * (d - b);\n\n  if (det === 0) {\n    return false;\n  } else {\n    var lambda = ((s - q) * (r - a) + (p - r) * (s - b)) / det;\n    var gamma = ((b - d) * (r - a) + (c - a) * (s - b)) / det;\n    return 0 < lambda && lambda < 1 && 0 < gamma && gamma < 1;\n  }\n};\n\n// -----------------------------------------------------------------------------\n// Section: Class Constants\n// -----------------------------------------------------------------------------\n/**\n * Some useful pre-calculated constants\n */\nIGeometry.HALF_PI = 0.5 * Math.PI;\nIGeometry.ONE_AND_HALF_PI = 1.5 * Math.PI;\nIGeometry.TWO_PI = 2.0 * Math.PI;\nIGeometry.THREE_PI = 3.0 * Math.PI;\n\nmodule.exports = IGeometry;\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction IMath() {}\n\n/**\n * This method returns the sign of the input value.\n */\nIMath.sign = function (value) {\n  if (value > 0) {\n    return 1;\n  } else if (value < 0) {\n    return -1;\n  } else {\n    return 0;\n  }\n};\n\nIMath.floor = function (value) {\n  return value < 0 ? Math.ceil(value) : Math.floor(value);\n};\n\nIMath.ceil = function (value) {\n  return value < 0 ? Math.floor(value) : Math.ceil(value);\n};\n\nmodule.exports = IMath;\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction Integer() {}\n\nInteger.MAX_VALUE = 2147483647;\nInteger.MIN_VALUE = -2147483648;\n\nmodule.exports = Integer;\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar nodeFrom = function nodeFrom(value) {\n  return { value: value, next: null, prev: null };\n};\n\nvar add = function add(prev, node, next, list) {\n  if (prev !== null) {\n    prev.next = node;\n  } else {\n    list.head = node;\n  }\n\n  if (next !== null) {\n    next.prev = node;\n  } else {\n    list.tail = node;\n  }\n\n  node.prev = prev;\n  node.next = next;\n\n  list.length++;\n\n  return node;\n};\n\nvar _remove = function _remove(node, list) {\n  var prev = node.prev,\n      next = node.next;\n\n\n  if (prev !== null) {\n    prev.next = next;\n  } else {\n    list.head = next;\n  }\n\n  if (next !== null) {\n    next.prev = prev;\n  } else {\n    list.tail = prev;\n  }\n\n  node.prev = node.next = null;\n\n  list.length--;\n\n  return node;\n};\n\nvar LinkedList = function () {\n  function LinkedList(vals) {\n    var _this = this;\n\n    _classCallCheck(this, LinkedList);\n\n    this.length = 0;\n    this.head = null;\n    this.tail = null;\n\n    if (vals != null) {\n      vals.forEach(function (v) {\n        return _this.push(v);\n      });\n    }\n  }\n\n  _createClass(LinkedList, [{\n    key: \"size\",\n    value: function size() {\n      return this.length;\n    }\n  }, {\n    key: \"insertBefore\",\n    value: function insertBefore(val, otherNode) {\n      return add(otherNode.prev, nodeFrom(val), otherNode, this);\n    }\n  }, {\n    key: \"insertAfter\",\n    value: function insertAfter(val, otherNode) {\n      return add(otherNode, nodeFrom(val), otherNode.next, this);\n    }\n  }, {\n    key: \"insertNodeBefore\",\n    value: function insertNodeBefore(newNode, otherNode) {\n      return add(otherNode.prev, newNode, otherNode, this);\n    }\n  }, {\n    key: \"insertNodeAfter\",\n    value: function insertNodeAfter(newNode, otherNode) {\n      return add(otherNode, newNode, otherNode.next, this);\n    }\n  }, {\n    key: \"push\",\n    value: function push(val) {\n      return add(this.tail, nodeFrom(val), null, this);\n    }\n  }, {\n    key: \"unshift\",\n    value: function unshift(val) {\n      return add(null, nodeFrom(val), this.head, this);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(node) {\n      return _remove(node, this);\n    }\n  }, {\n    key: \"pop\",\n    value: function pop() {\n      return _remove(this.tail, this).value;\n    }\n  }, {\n    key: \"popNode\",\n    value: function popNode() {\n      return _remove(this.tail, this);\n    }\n  }, {\n    key: \"shift\",\n    value: function shift() {\n      return _remove(this.head, this).value;\n    }\n  }, {\n    key: \"shiftNode\",\n    value: function shiftNode() {\n      return _remove(this.head, this);\n    }\n  }, {\n    key: \"get_object_at\",\n    value: function get_object_at(index) {\n      if (index <= this.length()) {\n        var i = 1;\n        var current = this.head;\n        while (i < index) {\n          current = current.next;\n          i++;\n        }\n        return current.value;\n      }\n    }\n  }, {\n    key: \"set_object_at\",\n    value: function set_object_at(index, value) {\n      if (index <= this.length()) {\n        var i = 1;\n        var current = this.head;\n        while (i < index) {\n          current = current.next;\n          i++;\n        }\n        current.value = value;\n      }\n    }\n  }]);\n\n  return LinkedList;\n}();\n\nmodule.exports = LinkedList;\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/*\r\n *This class is the javascript implementation of the Point.java class in jdk\r\n */\nfunction Point(x, y, p) {\n  this.x = null;\n  this.y = null;\n  if (x == null && y == null && p == null) {\n    this.x = 0;\n    this.y = 0;\n  } else if (typeof x == 'number' && typeof y == 'number' && p == null) {\n    this.x = x;\n    this.y = y;\n  } else if (x.constructor.name == 'Point' && y == null && p == null) {\n    p = x;\n    this.x = p.x;\n    this.y = p.y;\n  }\n}\n\nPoint.prototype.getX = function () {\n  return this.x;\n};\n\nPoint.prototype.getY = function () {\n  return this.y;\n};\n\nPoint.prototype.getLocation = function () {\n  return new Point(this.x, this.y);\n};\n\nPoint.prototype.setLocation = function (x, y, p) {\n  if (x.constructor.name == 'Point' && y == null && p == null) {\n    p = x;\n    this.setLocation(p.x, p.y);\n  } else if (typeof x == 'number' && typeof y == 'number' && p == null) {\n    //if both parameters are integer just move (x,y) location\n    if (parseInt(x) == x && parseInt(y) == y) {\n      this.move(x, y);\n    } else {\n      this.x = Math.floor(x + 0.5);\n      this.y = Math.floor(y + 0.5);\n    }\n  }\n};\n\nPoint.prototype.move = function (x, y) {\n  this.x = x;\n  this.y = y;\n};\n\nPoint.prototype.translate = function (dx, dy) {\n  this.x += dx;\n  this.y += dy;\n};\n\nPoint.prototype.equals = function (obj) {\n  if (obj.constructor.name == \"Point\") {\n    var pt = obj;\n    return this.x == pt.x && this.y == pt.y;\n  }\n  return this == obj;\n};\n\nPoint.prototype.toString = function () {\n  return new Point().constructor.name + \"[x=\" + this.x + \",y=\" + this.y + \"]\";\n};\n\nmodule.exports = Point;\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction RectangleD(x, y, width, height) {\n  this.x = 0;\n  this.y = 0;\n  this.width = 0;\n  this.height = 0;\n\n  if (x != null && y != null && width != null && height != null) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n}\n\nRectangleD.prototype.getX = function () {\n  return this.x;\n};\n\nRectangleD.prototype.setX = function (x) {\n  this.x = x;\n};\n\nRectangleD.prototype.getY = function () {\n  return this.y;\n};\n\nRectangleD.prototype.setY = function (y) {\n  this.y = y;\n};\n\nRectangleD.prototype.getWidth = function () {\n  return this.width;\n};\n\nRectangleD.prototype.setWidth = function (width) {\n  this.width = width;\n};\n\nRectangleD.prototype.getHeight = function () {\n  return this.height;\n};\n\nRectangleD.prototype.setHeight = function (height) {\n  this.height = height;\n};\n\nRectangleD.prototype.getRight = function () {\n  return this.x + this.width;\n};\n\nRectangleD.prototype.getBottom = function () {\n  return this.y + this.height;\n};\n\nRectangleD.prototype.intersects = function (a) {\n  if (this.getRight() < a.x) {\n    return false;\n  }\n\n  if (this.getBottom() < a.y) {\n    return false;\n  }\n\n  if (a.getRight() < this.x) {\n    return false;\n  }\n\n  if (a.getBottom() < this.y) {\n    return false;\n  }\n\n  return true;\n};\n\nRectangleD.prototype.getCenterX = function () {\n  return this.x + this.width / 2;\n};\n\nRectangleD.prototype.getMinX = function () {\n  return this.getX();\n};\n\nRectangleD.prototype.getMaxX = function () {\n  return this.getX() + this.width;\n};\n\nRectangleD.prototype.getCenterY = function () {\n  return this.y + this.height / 2;\n};\n\nRectangleD.prototype.getMinY = function () {\n  return this.getY();\n};\n\nRectangleD.prototype.getMaxY = function () {\n  return this.getY() + this.height;\n};\n\nRectangleD.prototype.getWidthHalf = function () {\n  return this.width / 2;\n};\n\nRectangleD.prototype.getHeightHalf = function () {\n  return this.height / 2;\n};\n\nmodule.exports = RectangleD;\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction UniqueIDGeneretor() {}\n\nUniqueIDGeneretor.lastID = 0;\n\nUniqueIDGeneretor.createID = function (obj) {\n  if (UniqueIDGeneretor.isPrimitive(obj)) {\n    return obj;\n  }\n  if (obj.uniqueID != null) {\n    return obj.uniqueID;\n  }\n  obj.uniqueID = UniqueIDGeneretor.getString();\n  UniqueIDGeneretor.lastID++;\n  return obj.uniqueID;\n};\n\nUniqueIDGeneretor.getString = function (id) {\n  if (id == null) id = UniqueIDGeneretor.lastID;\n  return \"Object#\" + id + \"\";\n};\n\nUniqueIDGeneretor.isPrimitive = function (arg) {\n  var type = typeof arg === \"undefined\" ? \"undefined\" : _typeof(arg);\n  return arg == null || type != \"object\" && type != \"function\";\n};\n\nmodule.exports = UniqueIDGeneretor;\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar LayoutConstants = __webpack_require__(0);\nvar LGraphManager = __webpack_require__(6);\nvar LNode = __webpack_require__(3);\nvar LEdge = __webpack_require__(1);\nvar LGraph = __webpack_require__(5);\nvar PointD = __webpack_require__(4);\nvar Transform = __webpack_require__(17);\nvar Emitter = __webpack_require__(27);\n\nfunction Layout(isRemoteUse) {\n  Emitter.call(this);\n\n  //Layout Quality: 0:draft, 1:default, 2:proof\n  this.layoutQuality = LayoutConstants.QUALITY;\n  //Whether layout should create bendpoints as needed or not\n  this.createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;\n  //Whether layout should be incremental or not\n  this.incremental = LayoutConstants.DEFAULT_INCREMENTAL;\n  //Whether we animate from before to after layout node positions\n  this.animationOnLayout = LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT;\n  //Whether we animate the layout process or not\n  this.animationDuringLayout = LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT;\n  //Number iterations that should be done between two successive animations\n  this.animationPeriod = LayoutConstants.DEFAULT_ANIMATION_PERIOD;\n  /**\r\n   * Whether or not leaf nodes (non-compound nodes) are of uniform sizes. When\r\n   * they are, both spring and repulsion forces between two leaf nodes can be\r\n   * calculated without the expensive clipping point calculations, resulting\r\n   * in major speed-up.\r\n   */\n  this.uniformLeafNodeSizes = LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES;\n  /**\r\n   * This is used for creation of bendpoints by using dummy nodes and edges.\r\n   * Maps an LEdge to its dummy bendpoint path.\r\n   */\n  this.edgeToDummyNodes = new Map();\n  this.graphManager = new LGraphManager(this);\n  this.isLayoutFinished = false;\n  this.isSubLayout = false;\n  this.isRemoteUse = false;\n\n  if (isRemoteUse != null) {\n    this.isRemoteUse = isRemoteUse;\n  }\n}\n\nLayout.RANDOM_SEED = 1;\n\nLayout.prototype = Object.create(Emitter.prototype);\n\nLayout.prototype.getGraphManager = function () {\n  return this.graphManager;\n};\n\nLayout.prototype.getAllNodes = function () {\n  return this.graphManager.getAllNodes();\n};\n\nLayout.prototype.getAllEdges = function () {\n  return this.graphManager.getAllEdges();\n};\n\nLayout.prototype.getAllNodesToApplyGravitation = function () {\n  return this.graphManager.getAllNodesToApplyGravitation();\n};\n\nLayout.prototype.newGraphManager = function () {\n  var gm = new LGraphManager(this);\n  this.graphManager = gm;\n  return gm;\n};\n\nLayout.prototype.newGraph = function (vGraph) {\n  return new LGraph(null, this.graphManager, vGraph);\n};\n\nLayout.prototype.newNode = function (vNode) {\n  return new LNode(this.graphManager, vNode);\n};\n\nLayout.prototype.newEdge = function (vEdge) {\n  return new LEdge(null, null, vEdge);\n};\n\nLayout.prototype.checkLayoutSuccess = function () {\n  return this.graphManager.getRoot() == null || this.graphManager.getRoot().getNodes().length == 0 || this.graphManager.includesInvalidEdge();\n};\n\nLayout.prototype.runLayout = function () {\n  this.isLayoutFinished = false;\n\n  if (this.tilingPreLayout) {\n    this.tilingPreLayout();\n  }\n\n  this.initParameters();\n  var isLayoutSuccessfull;\n\n  if (this.checkLayoutSuccess()) {\n    isLayoutSuccessfull = false;\n  } else {\n    isLayoutSuccessfull = this.layout();\n  }\n\n  if (LayoutConstants.ANIMATE === 'during') {\n    // If this is a 'during' layout animation. Layout is not finished yet. \n    // We need to perform these in index.js when layout is really finished.\n    return false;\n  }\n\n  if (isLayoutSuccessfull) {\n    if (!this.isSubLayout) {\n      this.doPostLayout();\n    }\n  }\n\n  if (this.tilingPostLayout) {\n    this.tilingPostLayout();\n  }\n\n  this.isLayoutFinished = true;\n\n  return isLayoutSuccessfull;\n};\n\n/**\r\n * This method performs the operations required after layout.\r\n */\nLayout.prototype.doPostLayout = function () {\n  //assert !isSubLayout : \"Should not be called on sub-layout!\";\n  // Propagate geometric changes to v-level objects\n  if (!this.incremental) {\n    this.transform();\n  }\n  this.update();\n};\n\n/**\r\n * This method updates the geometry of the target graph according to\r\n * calculated layout.\r\n */\nLayout.prototype.update2 = function () {\n  // update bend points\n  if (this.createBendsAsNeeded) {\n    this.createBendpointsFromDummyNodes();\n\n    // reset all edges, since the topology has changed\n    this.graphManager.resetAllEdges();\n  }\n\n  // perform edge, node and root updates if layout is not called\n  // remotely\n  if (!this.isRemoteUse) {\n    // update all edges\n    var edge;\n    var allEdges = this.graphManager.getAllEdges();\n    for (var i = 0; i < allEdges.length; i++) {\n      edge = allEdges[i];\n      //      this.update(edge);\n    }\n\n    // recursively update nodes\n    var node;\n    var nodes = this.graphManager.getRoot().getNodes();\n    for (var i = 0; i < nodes.length; i++) {\n      node = nodes[i];\n      //      this.update(node);\n    }\n\n    // update root graph\n    this.update(this.graphManager.getRoot());\n  }\n};\n\nLayout.prototype.update = function (obj) {\n  if (obj == null) {\n    this.update2();\n  } else if (obj instanceof LNode) {\n    var node = obj;\n    if (node.getChild() != null) {\n      // since node is compound, recursively update child nodes\n      var nodes = node.getChild().getNodes();\n      for (var i = 0; i < nodes.length; i++) {\n        update(nodes[i]);\n      }\n    }\n\n    // if the l-level node is associated with a v-level graph object,\n    // then it is assumed that the v-level node implements the\n    // interface Updatable.\n    if (node.vGraphObject != null) {\n      // cast to Updatable without any type check\n      var vNode = node.vGraphObject;\n\n      // call the update method of the interface\n      vNode.update(node);\n    }\n  } else if (obj instanceof LEdge) {\n    var edge = obj;\n    // if the l-level edge is associated with a v-level graph object,\n    // then it is assumed that the v-level edge implements the\n    // interface Updatable.\n\n    if (edge.vGraphObject != null) {\n      // cast to Updatable without any type check\n      var vEdge = edge.vGraphObject;\n\n      // call the update method of the interface\n      vEdge.update(edge);\n    }\n  } else if (obj instanceof LGraph) {\n    var graph = obj;\n    // if the l-level graph is associated with a v-level graph object,\n    // then it is assumed that the v-level object implements the\n    // interface Updatable.\n\n    if (graph.vGraphObject != null) {\n      // cast to Updatable without any type check\n      var vGraph = graph.vGraphObject;\n\n      // call the update method of the interface\n      vGraph.update(graph);\n    }\n  }\n};\n\n/**\r\n * This method is used to set all layout parameters to default values\r\n * determined at compile time.\r\n */\nLayout.prototype.initParameters = function () {\n  if (!this.isSubLayout) {\n    this.layoutQuality = LayoutConstants.QUALITY;\n    this.animationDuringLayout = LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT;\n    this.animationPeriod = LayoutConstants.DEFAULT_ANIMATION_PERIOD;\n    this.animationOnLayout = LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT;\n    this.incremental = LayoutConstants.DEFAULT_INCREMENTAL;\n    this.createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;\n    this.uniformLeafNodeSizes = LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES;\n  }\n\n  if (this.animationDuringLayout) {\n    this.animationOnLayout = false;\n  }\n};\n\nLayout.prototype.transform = function (newLeftTop) {\n  if (newLeftTop == undefined) {\n    this.transform(new PointD(0, 0));\n  } else {\n    // create a transformation object (from Eclipse to layout). When an\n    // inverse transform is applied, we get upper-left coordinate of the\n    // drawing or the root graph at given input coordinate (some margins\n    // already included in calculation of left-top).\n\n    var trans = new Transform();\n    var leftTop = this.graphManager.getRoot().updateLeftTop();\n\n    if (leftTop != null) {\n      trans.setWorldOrgX(newLeftTop.x);\n      trans.setWorldOrgY(newLeftTop.y);\n\n      trans.setDeviceOrgX(leftTop.x);\n      trans.setDeviceOrgY(leftTop.y);\n\n      var nodes = this.getAllNodes();\n      var node;\n\n      for (var i = 0; i < nodes.length; i++) {\n        node = nodes[i];\n        node.transform(trans);\n      }\n    }\n  }\n};\n\nLayout.prototype.positionNodesRandomly = function (graph) {\n\n  if (graph == undefined) {\n    //assert !this.incremental;\n    this.positionNodesRandomly(this.getGraphManager().getRoot());\n    this.getGraphManager().getRoot().updateBounds(true);\n  } else {\n    var lNode;\n    var childGraph;\n\n    var nodes = graph.getNodes();\n    for (var i = 0; i < nodes.length; i++) {\n      lNode = nodes[i];\n      childGraph = lNode.getChild();\n\n      if (childGraph == null) {\n        lNode.scatter();\n      } else if (childGraph.getNodes().length == 0) {\n        lNode.scatter();\n      } else {\n        this.positionNodesRandomly(childGraph);\n        lNode.updateBounds();\n      }\n    }\n  }\n};\n\n/**\r\n * This method returns a list of trees where each tree is represented as a\r\n * list of l-nodes. The method returns a list of size 0 when:\r\n * - The graph is not flat or\r\n * - One of the component(s) of the graph is not a tree.\r\n */\nLayout.prototype.getFlatForest = function () {\n  var flatForest = [];\n  var isForest = true;\n\n  // Quick reference for all nodes in the graph manager associated with\n  // this layout. The list should not be changed.\n  var allNodes = this.graphManager.getRoot().getNodes();\n\n  // First be sure that the graph is flat\n  var isFlat = true;\n\n  for (var i = 0; i < allNodes.length; i++) {\n    if (allNodes[i].getChild() != null) {\n      isFlat = false;\n    }\n  }\n\n  // Return empty forest if the graph is not flat.\n  if (!isFlat) {\n    return flatForest;\n  }\n\n  // Run BFS for each component of the graph.\n\n  var visited = new Set();\n  var toBeVisited = [];\n  var parents = new Map();\n  var unProcessedNodes = [];\n\n  unProcessedNodes = unProcessedNodes.concat(allNodes);\n\n  // Each iteration of this loop finds a component of the graph and\n  // decides whether it is a tree or not. If it is a tree, adds it to the\n  // forest and continued with the next component.\n\n  while (unProcessedNodes.length > 0 && isForest) {\n    toBeVisited.push(unProcessedNodes[0]);\n\n    // Start the BFS. Each iteration of this loop visits a node in a\n    // BFS manner.\n    while (toBeVisited.length > 0 && isForest) {\n      //pool operation\n      var currentNode = toBeVisited[0];\n      toBeVisited.splice(0, 1);\n      visited.add(currentNode);\n\n      // Traverse all neighbors of this node\n      var neighborEdges = currentNode.getEdges();\n\n      for (var i = 0; i < neighborEdges.length; i++) {\n        var currentNeighbor = neighborEdges[i].getOtherEnd(currentNode);\n\n        // If BFS is not growing from this neighbor.\n        if (parents.get(currentNode) != currentNeighbor) {\n          // We haven't previously visited this neighbor.\n          if (!visited.has(currentNeighbor)) {\n            toBeVisited.push(currentNeighbor);\n            parents.set(currentNeighbor, currentNode);\n          }\n          // Since we have previously visited this neighbor and\n          // this neighbor is not parent of currentNode, given\n          // graph contains a component that is not tree, hence\n          // it is not a forest.\n          else {\n              isForest = false;\n              break;\n            }\n        }\n      }\n    }\n\n    // The graph contains a component that is not a tree. Empty\n    // previously found trees. The method will end.\n    if (!isForest) {\n      flatForest = [];\n    }\n    // Save currently visited nodes as a tree in our forest. Reset\n    // visited and parents lists. Continue with the next component of\n    // the graph, if any.\n    else {\n        var temp = [].concat(_toConsumableArray(visited));\n        flatForest.push(temp);\n        //flatForest = flatForest.concat(temp);\n        //unProcessedNodes.removeAll(visited);\n        for (var i = 0; i < temp.length; i++) {\n          var value = temp[i];\n          var index = unProcessedNodes.indexOf(value);\n          if (index > -1) {\n            unProcessedNodes.splice(index, 1);\n          }\n        }\n        visited = new Set();\n        parents = new Map();\n      }\n  }\n\n  return flatForest;\n};\n\n/**\r\n * This method creates dummy nodes (an l-level node with minimal dimensions)\r\n * for the given edge (one per bendpoint). The existing l-level structure\r\n * is updated accordingly.\r\n */\nLayout.prototype.createDummyNodesForBendpoints = function (edge) {\n  var dummyNodes = [];\n  var prev = edge.source;\n\n  var graph = this.graphManager.calcLowestCommonAncestor(edge.source, edge.target);\n\n  for (var i = 0; i < edge.bendpoints.length; i++) {\n    // create new dummy node\n    var dummyNode = this.newNode(null);\n    dummyNode.setRect(new Point(0, 0), new Dimension(1, 1));\n\n    graph.add(dummyNode);\n\n    // create new dummy edge between prev and dummy node\n    var dummyEdge = this.newEdge(null);\n    this.graphManager.add(dummyEdge, prev, dummyNode);\n\n    dummyNodes.add(dummyNode);\n    prev = dummyNode;\n  }\n\n  var dummyEdge = this.newEdge(null);\n  this.graphManager.add(dummyEdge, prev, edge.target);\n\n  this.edgeToDummyNodes.set(edge, dummyNodes);\n\n  // remove real edge from graph manager if it is inter-graph\n  if (edge.isInterGraph()) {\n    this.graphManager.remove(edge);\n  }\n  // else, remove the edge from the current graph\n  else {\n      graph.remove(edge);\n    }\n\n  return dummyNodes;\n};\n\n/**\r\n * This method creates bendpoints for edges from the dummy nodes\r\n * at l-level.\r\n */\nLayout.prototype.createBendpointsFromDummyNodes = function () {\n  var edges = [];\n  edges = edges.concat(this.graphManager.getAllEdges());\n  edges = [].concat(_toConsumableArray(this.edgeToDummyNodes.keys())).concat(edges);\n\n  for (var k = 0; k < edges.length; k++) {\n    var lEdge = edges[k];\n\n    if (lEdge.bendpoints.length > 0) {\n      var path = this.edgeToDummyNodes.get(lEdge);\n\n      for (var i = 0; i < path.length; i++) {\n        var dummyNode = path[i];\n        var p = new PointD(dummyNode.getCenterX(), dummyNode.getCenterY());\n\n        // update bendpoint's location according to dummy node\n        var ebp = lEdge.bendpoints.get(i);\n        ebp.x = p.x;\n        ebp.y = p.y;\n\n        // remove the dummy node, dummy edges incident with this\n        // dummy node is also removed (within the remove method)\n        dummyNode.getOwner().remove(dummyNode);\n      }\n\n      // add the real edge to graph\n      this.graphManager.add(lEdge, lEdge.source, lEdge.target);\n    }\n  }\n};\n\nLayout.transform = function (sliderValue, defaultValue, minDiv, maxMul) {\n  if (minDiv != undefined && maxMul != undefined) {\n    var value = defaultValue;\n\n    if (sliderValue <= 50) {\n      var minValue = defaultValue / minDiv;\n      value -= (defaultValue - minValue) / 50 * (50 - sliderValue);\n    } else {\n      var maxValue = defaultValue * maxMul;\n      value += (maxValue - defaultValue) / 50 * (sliderValue - 50);\n    }\n\n    return value;\n  } else {\n    var a, b;\n\n    if (sliderValue <= 50) {\n      a = 9.0 * defaultValue / 500.0;\n      b = defaultValue / 10.0;\n    } else {\n      a = 9.0 * defaultValue / 50.0;\n      b = -8 * defaultValue;\n    }\n\n    return a * sliderValue + b;\n  }\n};\n\n/**\r\n * This method finds and returns the center of the given nodes, assuming\r\n * that the given nodes form a tree in themselves.\r\n */\nLayout.findCenterOfTree = function (nodes) {\n  var list = [];\n  list = list.concat(nodes);\n\n  var removedNodes = [];\n  var remainingDegrees = new Map();\n  var foundCenter = false;\n  var centerNode = null;\n\n  if (list.length == 1 || list.length == 2) {\n    foundCenter = true;\n    centerNode = list[0];\n  }\n\n  for (var i = 0; i < list.length; i++) {\n    var node = list[i];\n    var degree = node.getNeighborsList().size;\n    remainingDegrees.set(node, node.getNeighborsList().size);\n\n    if (degree == 1) {\n      removedNodes.push(node);\n    }\n  }\n\n  var tempList = [];\n  tempList = tempList.concat(removedNodes);\n\n  while (!foundCenter) {\n    var tempList2 = [];\n    tempList2 = tempList2.concat(tempList);\n    tempList = [];\n\n    for (var i = 0; i < list.length; i++) {\n      var node = list[i];\n\n      var index = list.indexOf(node);\n      if (index >= 0) {\n        list.splice(index, 1);\n      }\n\n      var neighbours = node.getNeighborsList();\n\n      neighbours.forEach(function (neighbour) {\n        if (removedNodes.indexOf(neighbour) < 0) {\n          var otherDegree = remainingDegrees.get(neighbour);\n          var newDegree = otherDegree - 1;\n\n          if (newDegree == 1) {\n            tempList.push(neighbour);\n          }\n\n          remainingDegrees.set(neighbour, newDegree);\n        }\n      });\n    }\n\n    removedNodes = removedNodes.concat(tempList);\n\n    if (list.length == 1 || list.length == 2) {\n      foundCenter = true;\n      centerNode = list[0];\n    }\n  }\n\n  return centerNode;\n};\n\n/**\r\n * During the coarsening process, this layout may be referenced by two graph managers\r\n * this setter function grants access to change the currently being used graph manager\r\n */\nLayout.prototype.setGraphManager = function (gm) {\n  this.graphManager = gm;\n};\n\nmodule.exports = Layout;\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction RandomSeed() {}\n// adapted from: https://stackoverflow.com/a/19303725\nRandomSeed.seed = 1;\nRandomSeed.x = 0;\n\nRandomSeed.nextDouble = function () {\n  RandomSeed.x = Math.sin(RandomSeed.seed++) * 10000;\n  return RandomSeed.x - Math.floor(RandomSeed.x);\n};\n\nmodule.exports = RandomSeed;\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar PointD = __webpack_require__(4);\n\nfunction Transform(x, y) {\n  this.lworldOrgX = 0.0;\n  this.lworldOrgY = 0.0;\n  this.ldeviceOrgX = 0.0;\n  this.ldeviceOrgY = 0.0;\n  this.lworldExtX = 1.0;\n  this.lworldExtY = 1.0;\n  this.ldeviceExtX = 1.0;\n  this.ldeviceExtY = 1.0;\n}\n\nTransform.prototype.getWorldOrgX = function () {\n  return this.lworldOrgX;\n};\n\nTransform.prototype.setWorldOrgX = function (wox) {\n  this.lworldOrgX = wox;\n};\n\nTransform.prototype.getWorldOrgY = function () {\n  return this.lworldOrgY;\n};\n\nTransform.prototype.setWorldOrgY = function (woy) {\n  this.lworldOrgY = woy;\n};\n\nTransform.prototype.getWorldExtX = function () {\n  return this.lworldExtX;\n};\n\nTransform.prototype.setWorldExtX = function (wex) {\n  this.lworldExtX = wex;\n};\n\nTransform.prototype.getWorldExtY = function () {\n  return this.lworldExtY;\n};\n\nTransform.prototype.setWorldExtY = function (wey) {\n  this.lworldExtY = wey;\n};\n\n/* Device related */\n\nTransform.prototype.getDeviceOrgX = function () {\n  return this.ldeviceOrgX;\n};\n\nTransform.prototype.setDeviceOrgX = function (dox) {\n  this.ldeviceOrgX = dox;\n};\n\nTransform.prototype.getDeviceOrgY = function () {\n  return this.ldeviceOrgY;\n};\n\nTransform.prototype.setDeviceOrgY = function (doy) {\n  this.ldeviceOrgY = doy;\n};\n\nTransform.prototype.getDeviceExtX = function () {\n  return this.ldeviceExtX;\n};\n\nTransform.prototype.setDeviceExtX = function (dex) {\n  this.ldeviceExtX = dex;\n};\n\nTransform.prototype.getDeviceExtY = function () {\n  return this.ldeviceExtY;\n};\n\nTransform.prototype.setDeviceExtY = function (dey) {\n  this.ldeviceExtY = dey;\n};\n\nTransform.prototype.transformX = function (x) {\n  var xDevice = 0.0;\n  var worldExtX = this.lworldExtX;\n  if (worldExtX != 0.0) {\n    xDevice = this.ldeviceOrgX + (x - this.lworldOrgX) * this.ldeviceExtX / worldExtX;\n  }\n\n  return xDevice;\n};\n\nTransform.prototype.transformY = function (y) {\n  var yDevice = 0.0;\n  var worldExtY = this.lworldExtY;\n  if (worldExtY != 0.0) {\n    yDevice = this.ldeviceOrgY + (y - this.lworldOrgY) * this.ldeviceExtY / worldExtY;\n  }\n\n  return yDevice;\n};\n\nTransform.prototype.inverseTransformX = function (x) {\n  var xWorld = 0.0;\n  var deviceExtX = this.ldeviceExtX;\n  if (deviceExtX != 0.0) {\n    xWorld = this.lworldOrgX + (x - this.ldeviceOrgX) * this.lworldExtX / deviceExtX;\n  }\n\n  return xWorld;\n};\n\nTransform.prototype.inverseTransformY = function (y) {\n  var yWorld = 0.0;\n  var deviceExtY = this.ldeviceExtY;\n  if (deviceExtY != 0.0) {\n    yWorld = this.lworldOrgY + (y - this.ldeviceOrgY) * this.lworldExtY / deviceExtY;\n  }\n  return yWorld;\n};\n\nTransform.prototype.inverseTransformPoint = function (inPoint) {\n  var outPoint = new PointD(this.inverseTransformX(inPoint.x), this.inverseTransformY(inPoint.y));\n  return outPoint;\n};\n\nmodule.exports = Transform;\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar Layout = __webpack_require__(15);\nvar FDLayoutConstants = __webpack_require__(7);\nvar LayoutConstants = __webpack_require__(0);\nvar IGeometry = __webpack_require__(8);\nvar IMath = __webpack_require__(9);\n\nfunction FDLayout() {\n  Layout.call(this);\n\n  this.useSmartIdealEdgeLengthCalculation = FDLayoutConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION;\n  this.idealEdgeLength = FDLayoutConstants.DEFAULT_EDGE_LENGTH;\n  this.springConstant = FDLayoutConstants.DEFAULT_SPRING_STRENGTH;\n  this.repulsionConstant = FDLayoutConstants.DEFAULT_REPULSION_STRENGTH;\n  this.gravityConstant = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH;\n  this.compoundGravityConstant = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH;\n  this.gravityRangeFactor = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR;\n  this.compoundGravityRangeFactor = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR;\n  this.displacementThresholdPerNode = 3.0 * FDLayoutConstants.DEFAULT_EDGE_LENGTH / 100;\n  this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;\n  this.initialCoolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;\n  this.totalDisplacement = 0.0;\n  this.oldTotalDisplacement = 0.0;\n  this.maxIterations = FDLayoutConstants.MAX_ITERATIONS;\n}\n\nFDLayout.prototype = Object.create(Layout.prototype);\n\nfor (var prop in Layout) {\n  FDLayout[prop] = Layout[prop];\n}\n\nFDLayout.prototype.initParameters = function () {\n  Layout.prototype.initParameters.call(this, arguments);\n\n  this.totalIterations = 0;\n  this.notAnimatedIterations = 0;\n\n  this.useFRGridVariant = FDLayoutConstants.DEFAULT_USE_SMART_REPULSION_RANGE_CALCULATION;\n\n  this.grid = [];\n};\n\nFDLayout.prototype.calcIdealEdgeLengths = function () {\n  var edge;\n  var lcaDepth;\n  var source;\n  var target;\n  var sizeOfSourceInLca;\n  var sizeOfTargetInLca;\n\n  var allEdges = this.getGraphManager().getAllEdges();\n  for (var i = 0; i < allEdges.length; i++) {\n    edge = allEdges[i];\n\n    edge.idealLength = this.idealEdgeLength;\n\n    if (edge.isInterGraph) {\n      source = edge.getSource();\n      target = edge.getTarget();\n\n      sizeOfSourceInLca = edge.getSourceInLca().getEstimatedSize();\n      sizeOfTargetInLca = edge.getTargetInLca().getEstimatedSize();\n\n      if (this.useSmartIdealEdgeLengthCalculation) {\n        edge.idealLength += sizeOfSourceInLca + sizeOfTargetInLca - 2 * LayoutConstants.SIMPLE_NODE_SIZE;\n      }\n\n      lcaDepth = edge.getLca().getInclusionTreeDepth();\n\n      edge.idealLength += FDLayoutConstants.DEFAULT_EDGE_LENGTH * FDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR * (source.getInclusionTreeDepth() + target.getInclusionTreeDepth() - 2 * lcaDepth);\n    }\n  }\n};\n\nFDLayout.prototype.initSpringEmbedder = function () {\n\n  var s = this.getAllNodes().length;\n  if (this.incremental) {\n    if (s > FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) {\n      this.coolingFactor = Math.max(this.coolingFactor * FDLayoutConstants.COOLING_ADAPTATION_FACTOR, this.coolingFactor - (s - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) / (FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) * this.coolingFactor * (1 - FDLayoutConstants.COOLING_ADAPTATION_FACTOR));\n    }\n    this.maxNodeDisplacement = FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL;\n  } else {\n    if (s > FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) {\n      this.coolingFactor = Math.max(FDLayoutConstants.COOLING_ADAPTATION_FACTOR, 1.0 - (s - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) / (FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) * (1 - FDLayoutConstants.COOLING_ADAPTATION_FACTOR));\n    } else {\n      this.coolingFactor = 1.0;\n    }\n    this.initialCoolingFactor = this.coolingFactor;\n    this.maxNodeDisplacement = FDLayoutConstants.MAX_NODE_DISPLACEMENT;\n  }\n\n  this.maxIterations = Math.max(this.getAllNodes().length * 5, this.maxIterations);\n\n  this.totalDisplacementThreshold = this.displacementThresholdPerNode * this.getAllNodes().length;\n\n  this.repulsionRange = this.calcRepulsionRange();\n};\n\nFDLayout.prototype.calcSpringForces = function () {\n  var lEdges = this.getAllEdges();\n  var edge;\n\n  for (var i = 0; i < lEdges.length; i++) {\n    edge = lEdges[i];\n\n    this.calcSpringForce(edge, edge.idealLength);\n  }\n};\n\nFDLayout.prototype.calcRepulsionForces = function () {\n  var gridUpdateAllowed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  var forceToNodeSurroundingUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var i, j;\n  var nodeA, nodeB;\n  var lNodes = this.getAllNodes();\n  var processedNodeSet;\n\n  if (this.useFRGridVariant) {\n    if (this.totalIterations % FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD == 1 && gridUpdateAllowed) {\n      this.updateGrid();\n    }\n\n    processedNodeSet = new Set();\n\n    // calculate repulsion forces between each nodes and its surrounding\n    for (i = 0; i < lNodes.length; i++) {\n      nodeA = lNodes[i];\n      this.calculateRepulsionForceOfANode(nodeA, processedNodeSet, gridUpdateAllowed, forceToNodeSurroundingUpdate);\n      processedNodeSet.add(nodeA);\n    }\n  } else {\n    for (i = 0; i < lNodes.length; i++) {\n      nodeA = lNodes[i];\n\n      for (j = i + 1; j < lNodes.length; j++) {\n        nodeB = lNodes[j];\n\n        // If both nodes are not members of the same graph, skip.\n        if (nodeA.getOwner() != nodeB.getOwner()) {\n          continue;\n        }\n\n        this.calcRepulsionForce(nodeA, nodeB);\n      }\n    }\n  }\n};\n\nFDLayout.prototype.calcGravitationalForces = function () {\n  var node;\n  var lNodes = this.getAllNodesToApplyGravitation();\n\n  for (var i = 0; i < lNodes.length; i++) {\n    node = lNodes[i];\n    this.calcGravitationalForce(node);\n  }\n};\n\nFDLayout.prototype.moveNodes = function () {\n  var lNodes = this.getAllNodes();\n  var node;\n\n  for (var i = 0; i < lNodes.length; i++) {\n    node = lNodes[i];\n    node.move();\n  }\n};\n\nFDLayout.prototype.calcSpringForce = function (edge, idealLength) {\n  var sourceNode = edge.getSource();\n  var targetNode = edge.getTarget();\n\n  var length;\n  var springForce;\n  var springForceX;\n  var springForceY;\n\n  // Update edge length\n  if (this.uniformLeafNodeSizes && sourceNode.getChild() == null && targetNode.getChild() == null) {\n    edge.updateLengthSimple();\n  } else {\n    edge.updateLength();\n\n    if (edge.isOverlapingSourceAndTarget) {\n      return;\n    }\n  }\n\n  length = edge.getLength();\n\n  if (length == 0) return;\n\n  // Calculate spring forces\n  springForce = this.springConstant * (length - idealLength);\n\n  // Project force onto x and y axes\n  springForceX = springForce * (edge.lengthX / length);\n  springForceY = springForce * (edge.lengthY / length);\n\n  // Apply forces on the end nodes\n  sourceNode.springForceX += springForceX;\n  sourceNode.springForceY += springForceY;\n  targetNode.springForceX -= springForceX;\n  targetNode.springForceY -= springForceY;\n};\n\nFDLayout.prototype.calcRepulsionForce = function (nodeA, nodeB) {\n  var rectA = nodeA.getRect();\n  var rectB = nodeB.getRect();\n  var overlapAmount = new Array(2);\n  var clipPoints = new Array(4);\n  var distanceX;\n  var distanceY;\n  var distanceSquared;\n  var distance;\n  var repulsionForce;\n  var repulsionForceX;\n  var repulsionForceY;\n\n  if (rectA.intersects(rectB)) // two nodes overlap\n    {\n      // calculate separation amount in x and y directions\n      IGeometry.calcSeparationAmount(rectA, rectB, overlapAmount, FDLayoutConstants.DEFAULT_EDGE_LENGTH / 2.0);\n\n      repulsionForceX = 2 * overlapAmount[0];\n      repulsionForceY = 2 * overlapAmount[1];\n\n      var childrenConstant = nodeA.noOfChildren * nodeB.noOfChildren / (nodeA.noOfChildren + nodeB.noOfChildren);\n\n      // Apply forces on the two nodes\n      nodeA.repulsionForceX -= childrenConstant * repulsionForceX;\n      nodeA.repulsionForceY -= childrenConstant * repulsionForceY;\n      nodeB.repulsionForceX += childrenConstant * repulsionForceX;\n      nodeB.repulsionForceY += childrenConstant * repulsionForceY;\n    } else // no overlap\n    {\n      // calculate distance\n\n      if (this.uniformLeafNodeSizes && nodeA.getChild() == null && nodeB.getChild() == null) // simply base repulsion on distance of node centers\n        {\n          distanceX = rectB.getCenterX() - rectA.getCenterX();\n          distanceY = rectB.getCenterY() - rectA.getCenterY();\n        } else // use clipping points\n        {\n          IGeometry.getIntersection(rectA, rectB, clipPoints);\n\n          distanceX = clipPoints[2] - clipPoints[0];\n          distanceY = clipPoints[3] - clipPoints[1];\n        }\n\n      // No repulsion range. FR grid variant should take care of this.\n      if (Math.abs(distanceX) < FDLayoutConstants.MIN_REPULSION_DIST) {\n        distanceX = IMath.sign(distanceX) * FDLayoutConstants.MIN_REPULSION_DIST;\n      }\n\n      if (Math.abs(distanceY) < FDLayoutConstants.MIN_REPULSION_DIST) {\n        distanceY = IMath.sign(distanceY) * FDLayoutConstants.MIN_REPULSION_DIST;\n      }\n\n      distanceSquared = distanceX * distanceX + distanceY * distanceY;\n      distance = Math.sqrt(distanceSquared);\n\n      repulsionForce = this.repulsionConstant * nodeA.noOfChildren * nodeB.noOfChildren / distanceSquared;\n\n      // Project force onto x and y axes\n      repulsionForceX = repulsionForce * distanceX / distance;\n      repulsionForceY = repulsionForce * distanceY / distance;\n\n      // Apply forces on the two nodes    \n      nodeA.repulsionForceX -= repulsionForceX;\n      nodeA.repulsionForceY -= repulsionForceY;\n      nodeB.repulsionForceX += repulsionForceX;\n      nodeB.repulsionForceY += repulsionForceY;\n    }\n};\n\nFDLayout.prototype.calcGravitationalForce = function (node) {\n  var ownerGraph;\n  var ownerCenterX;\n  var ownerCenterY;\n  var distanceX;\n  var distanceY;\n  var absDistanceX;\n  var absDistanceY;\n  var estimatedSize;\n  ownerGraph = node.getOwner();\n\n  ownerCenterX = (ownerGraph.getRight() + ownerGraph.getLeft()) / 2;\n  ownerCenterY = (ownerGraph.getTop() + ownerGraph.getBottom()) / 2;\n  distanceX = node.getCenterX() - ownerCenterX;\n  distanceY = node.getCenterY() - ownerCenterY;\n  absDistanceX = Math.abs(distanceX) + node.getWidth() / 2;\n  absDistanceY = Math.abs(distanceY) + node.getHeight() / 2;\n\n  if (node.getOwner() == this.graphManager.getRoot()) // in the root graph\n    {\n      estimatedSize = ownerGraph.getEstimatedSize() * this.gravityRangeFactor;\n\n      if (absDistanceX > estimatedSize || absDistanceY > estimatedSize) {\n        node.gravitationForceX = -this.gravityConstant * distanceX;\n        node.gravitationForceY = -this.gravityConstant * distanceY;\n      }\n    } else // inside a compound\n    {\n      estimatedSize = ownerGraph.getEstimatedSize() * this.compoundGravityRangeFactor;\n\n      if (absDistanceX > estimatedSize || absDistanceY > estimatedSize) {\n        node.gravitationForceX = -this.gravityConstant * distanceX * this.compoundGravityConstant;\n        node.gravitationForceY = -this.gravityConstant * distanceY * this.compoundGravityConstant;\n      }\n    }\n};\n\nFDLayout.prototype.isConverged = function () {\n  var converged;\n  var oscilating = false;\n\n  if (this.totalIterations > this.maxIterations / 3) {\n    oscilating = Math.abs(this.totalDisplacement - this.oldTotalDisplacement) < 2;\n  }\n\n  converged = this.totalDisplacement < this.totalDisplacementThreshold;\n\n  this.oldTotalDisplacement = this.totalDisplacement;\n\n  return converged || oscilating;\n};\n\nFDLayout.prototype.animate = function () {\n  if (this.animationDuringLayout && !this.isSubLayout) {\n    if (this.notAnimatedIterations == this.animationPeriod) {\n      this.update();\n      this.notAnimatedIterations = 0;\n    } else {\n      this.notAnimatedIterations++;\n    }\n  }\n};\n\n//This method calculates the number of children (weight) for all nodes\nFDLayout.prototype.calcNoOfChildrenForAllNodes = function () {\n  var node;\n  var allNodes = this.graphManager.getAllNodes();\n\n  for (var i = 0; i < allNodes.length; i++) {\n    node = allNodes[i];\n    node.noOfChildren = node.getNoOfChildren();\n  }\n};\n\n// -----------------------------------------------------------------------------\n// Section: FR-Grid Variant Repulsion Force Calculation\n// -----------------------------------------------------------------------------\n\nFDLayout.prototype.calcGrid = function (graph) {\n\n  var sizeX = 0;\n  var sizeY = 0;\n\n  sizeX = parseInt(Math.ceil((graph.getRight() - graph.getLeft()) / this.repulsionRange));\n  sizeY = parseInt(Math.ceil((graph.getBottom() - graph.getTop()) / this.repulsionRange));\n\n  var grid = new Array(sizeX);\n\n  for (var i = 0; i < sizeX; i++) {\n    grid[i] = new Array(sizeY);\n  }\n\n  for (var i = 0; i < sizeX; i++) {\n    for (var j = 0; j < sizeY; j++) {\n      grid[i][j] = new Array();\n    }\n  }\n\n  return grid;\n};\n\nFDLayout.prototype.addNodeToGrid = function (v, left, top) {\n\n  var startX = 0;\n  var finishX = 0;\n  var startY = 0;\n  var finishY = 0;\n\n  startX = parseInt(Math.floor((v.getRect().x - left) / this.repulsionRange));\n  finishX = parseInt(Math.floor((v.getRect().width + v.getRect().x - left) / this.repulsionRange));\n  startY = parseInt(Math.floor((v.getRect().y - top) / this.repulsionRange));\n  finishY = parseInt(Math.floor((v.getRect().height + v.getRect().y - top) / this.repulsionRange));\n\n  for (var i = startX; i <= finishX; i++) {\n    for (var j = startY; j <= finishY; j++) {\n      this.grid[i][j].push(v);\n      v.setGridCoordinates(startX, finishX, startY, finishY);\n    }\n  }\n};\n\nFDLayout.prototype.updateGrid = function () {\n  var i;\n  var nodeA;\n  var lNodes = this.getAllNodes();\n\n  this.grid = this.calcGrid(this.graphManager.getRoot());\n\n  // put all nodes to proper grid cells\n  for (i = 0; i < lNodes.length; i++) {\n    nodeA = lNodes[i];\n    this.addNodeToGrid(nodeA, this.graphManager.getRoot().getLeft(), this.graphManager.getRoot().getTop());\n  }\n};\n\nFDLayout.prototype.calculateRepulsionForceOfANode = function (nodeA, processedNodeSet, gridUpdateAllowed, forceToNodeSurroundingUpdate) {\n\n  if (this.totalIterations % FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD == 1 && gridUpdateAllowed || forceToNodeSurroundingUpdate) {\n    var surrounding = new Set();\n    nodeA.surrounding = new Array();\n    var nodeB;\n    var grid = this.grid;\n\n    for (var i = nodeA.startX - 1; i < nodeA.finishX + 2; i++) {\n      for (var j = nodeA.startY - 1; j < nodeA.finishY + 2; j++) {\n        if (!(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length)) {\n          for (var k = 0; k < grid[i][j].length; k++) {\n            nodeB = grid[i][j][k];\n\n            // If both nodes are not members of the same graph, \n            // or both nodes are the same, skip.\n            if (nodeA.getOwner() != nodeB.getOwner() || nodeA == nodeB) {\n              continue;\n            }\n\n            // check if the repulsion force between\n            // nodeA and nodeB has already been calculated\n            if (!processedNodeSet.has(nodeB) && !surrounding.has(nodeB)) {\n              var distanceX = Math.abs(nodeA.getCenterX() - nodeB.getCenterX()) - (nodeA.getWidth() / 2 + nodeB.getWidth() / 2);\n              var distanceY = Math.abs(nodeA.getCenterY() - nodeB.getCenterY()) - (nodeA.getHeight() / 2 + nodeB.getHeight() / 2);\n\n              // if the distance between nodeA and nodeB \n              // is less then calculation range\n              if (distanceX <= this.repulsionRange && distanceY <= this.repulsionRange) {\n                //then add nodeB to surrounding of nodeA\n                surrounding.add(nodeB);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    nodeA.surrounding = [].concat(_toConsumableArray(surrounding));\n  }\n  for (i = 0; i < nodeA.surrounding.length; i++) {\n    this.calcRepulsionForce(nodeA, nodeA.surrounding[i]);\n  }\n};\n\nFDLayout.prototype.calcRepulsionRange = function () {\n  return 0.0;\n};\n\nmodule.exports = FDLayout;\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar LEdge = __webpack_require__(1);\nvar FDLayoutConstants = __webpack_require__(7);\n\nfunction FDLayoutEdge(source, target, vEdge) {\n  LEdge.call(this, source, target, vEdge);\n  this.idealLength = FDLayoutConstants.DEFAULT_EDGE_LENGTH;\n}\n\nFDLayoutEdge.prototype = Object.create(LEdge.prototype);\n\nfor (var prop in LEdge) {\n  FDLayoutEdge[prop] = LEdge[prop];\n}\n\nmodule.exports = FDLayoutEdge;\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar LNode = __webpack_require__(3);\n\nfunction FDLayoutNode(gm, loc, size, vNode) {\n  // alternative constructor is handled inside LNode\n  LNode.call(this, gm, loc, size, vNode);\n  //Spring, repulsion and gravitational forces acting on this node\n  this.springForceX = 0;\n  this.springForceY = 0;\n  this.repulsionForceX = 0;\n  this.repulsionForceY = 0;\n  this.gravitationForceX = 0;\n  this.gravitationForceY = 0;\n  //Amount by which this node is to be moved in this iteration\n  this.displacementX = 0;\n  this.displacementY = 0;\n\n  //Start and finish grid coordinates that this node is fallen into\n  this.startX = 0;\n  this.finishX = 0;\n  this.startY = 0;\n  this.finishY = 0;\n\n  //Geometric neighbors of this node\n  this.surrounding = [];\n}\n\nFDLayoutNode.prototype = Object.create(LNode.prototype);\n\nfor (var prop in LNode) {\n  FDLayoutNode[prop] = LNode[prop];\n}\n\nFDLayoutNode.prototype.setGridCoordinates = function (_startX, _finishX, _startY, _finishY) {\n  this.startX = _startX;\n  this.finishX = _finishX;\n  this.startY = _startY;\n  this.finishY = _finishY;\n};\n\nmodule.exports = FDLayoutNode;\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction DimensionD(width, height) {\n  this.width = 0;\n  this.height = 0;\n  if (width !== null && height !== null) {\n    this.height = height;\n    this.width = width;\n  }\n}\n\nDimensionD.prototype.getWidth = function () {\n  return this.width;\n};\n\nDimensionD.prototype.setWidth = function (width) {\n  this.width = width;\n};\n\nDimensionD.prototype.getHeight = function () {\n  return this.height;\n};\n\nDimensionD.prototype.setHeight = function (height) {\n  this.height = height;\n};\n\nmodule.exports = DimensionD;\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar UniqueIDGeneretor = __webpack_require__(14);\n\nfunction HashMap() {\n  this.map = {};\n  this.keys = [];\n}\n\nHashMap.prototype.put = function (key, value) {\n  var theId = UniqueIDGeneretor.createID(key);\n  if (!this.contains(theId)) {\n    this.map[theId] = value;\n    this.keys.push(key);\n  }\n};\n\nHashMap.prototype.contains = function (key) {\n  var theId = UniqueIDGeneretor.createID(key);\n  return this.map[key] != null;\n};\n\nHashMap.prototype.get = function (key) {\n  var theId = UniqueIDGeneretor.createID(key);\n  return this.map[theId];\n};\n\nHashMap.prototype.keySet = function () {\n  return this.keys;\n};\n\nmodule.exports = HashMap;\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar UniqueIDGeneretor = __webpack_require__(14);\n\nfunction HashSet() {\n  this.set = {};\n}\n;\n\nHashSet.prototype.add = function (obj) {\n  var theId = UniqueIDGeneretor.createID(obj);\n  if (!this.contains(theId)) this.set[theId] = obj;\n};\n\nHashSet.prototype.remove = function (obj) {\n  delete this.set[UniqueIDGeneretor.createID(obj)];\n};\n\nHashSet.prototype.clear = function () {\n  this.set = {};\n};\n\nHashSet.prototype.contains = function (obj) {\n  return this.set[UniqueIDGeneretor.createID(obj)] == obj;\n};\n\nHashSet.prototype.isEmpty = function () {\n  return this.size() === 0;\n};\n\nHashSet.prototype.size = function () {\n  return Object.keys(this.set).length;\n};\n\n//concats this.set to the given list\nHashSet.prototype.addAllTo = function (list) {\n  var keys = Object.keys(this.set);\n  var length = keys.length;\n  for (var i = 0; i < length; i++) {\n    list.push(this.set[keys[i]]);\n  }\n};\n\nHashSet.prototype.size = function () {\n  return Object.keys(this.set).length;\n};\n\nHashSet.prototype.addAll = function (list) {\n  var s = list.length;\n  for (var i = 0; i < s; i++) {\n    var v = list[i];\n    this.add(v);\n  }\n};\n\nmodule.exports = HashSet;\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * A classic Quicksort algorithm with Hoare's partition\n * - Works also on LinkedList objects\n *\n * Copyright: i-Vis Research Group, Bilkent University, 2007 - present\n */\n\nvar LinkedList = __webpack_require__(11);\n\nvar Quicksort = function () {\n    function Quicksort(A, compareFunction) {\n        _classCallCheck(this, Quicksort);\n\n        if (compareFunction !== null || compareFunction !== undefined) this.compareFunction = this._defaultCompareFunction;\n\n        var length = void 0;\n        if (A instanceof LinkedList) length = A.size();else length = A.length;\n\n        this._quicksort(A, 0, length - 1);\n    }\n\n    _createClass(Quicksort, [{\n        key: '_quicksort',\n        value: function _quicksort(A, p, r) {\n            if (p < r) {\n                var q = this._partition(A, p, r);\n                this._quicksort(A, p, q);\n                this._quicksort(A, q + 1, r);\n            }\n        }\n    }, {\n        key: '_partition',\n        value: function _partition(A, p, r) {\n            var x = this._get(A, p);\n            var i = p;\n            var j = r;\n            while (true) {\n                while (this.compareFunction(x, this._get(A, j))) {\n                    j--;\n                }while (this.compareFunction(this._get(A, i), x)) {\n                    i++;\n                }if (i < j) {\n                    this._swap(A, i, j);\n                    i++;\n                    j--;\n                } else return j;\n            }\n        }\n    }, {\n        key: '_get',\n        value: function _get(object, index) {\n            if (object instanceof LinkedList) return object.get_object_at(index);else return object[index];\n        }\n    }, {\n        key: '_set',\n        value: function _set(object, index, value) {\n            if (object instanceof LinkedList) object.set_object_at(index, value);else object[index] = value;\n        }\n    }, {\n        key: '_swap',\n        value: function _swap(A, i, j) {\n            var temp = this._get(A, i);\n            this._set(A, i, this._get(A, j));\n            this._set(A, j, temp);\n        }\n    }, {\n        key: '_defaultCompareFunction',\n        value: function _defaultCompareFunction(a, b) {\n            return b > a;\n        }\n    }]);\n\n    return Quicksort;\n}();\n\nmodule.exports = Quicksort;\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n *   Needleman-Wunsch algorithm is an procedure to compute the optimal global alignment of two string\n *   sequences by S.B.Needleman and C.D.Wunsch (1970).\n *\n *   Aside from the inputs, you can assign the scores for,\n *   - Match: The two characters at the current index are same.\n *   - Mismatch: The two characters at the current index are different.\n *   - Insertion/Deletion(gaps): The best alignment involves one letter aligning to a gap in the other string.\n */\n\nvar NeedlemanWunsch = function () {\n    function NeedlemanWunsch(sequence1, sequence2) {\n        var match_score = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n        var mismatch_penalty = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n        var gap_penalty = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;\n\n        _classCallCheck(this, NeedlemanWunsch);\n\n        this.sequence1 = sequence1;\n        this.sequence2 = sequence2;\n        this.match_score = match_score;\n        this.mismatch_penalty = mismatch_penalty;\n        this.gap_penalty = gap_penalty;\n\n        // Just the remove redundancy\n        this.iMax = sequence1.length + 1;\n        this.jMax = sequence2.length + 1;\n\n        // Grid matrix of scores\n        this.grid = new Array(this.iMax);\n        for (var i = 0; i < this.iMax; i++) {\n            this.grid[i] = new Array(this.jMax);\n\n            for (var j = 0; j < this.jMax; j++) {\n                this.grid[i][j] = 0;\n            }\n        }\n\n        // Traceback matrix (2D array, each cell is an array of boolean values for [`Diag`, `Up`, `Left`] positions)\n        this.tracebackGrid = new Array(this.iMax);\n        for (var _i = 0; _i < this.iMax; _i++) {\n            this.tracebackGrid[_i] = new Array(this.jMax);\n\n            for (var _j = 0; _j < this.jMax; _j++) {\n                this.tracebackGrid[_i][_j] = [null, null, null];\n            }\n        }\n\n        // The aligned sequences (return multiple possibilities)\n        this.alignments = [];\n\n        // Final alignment score\n        this.score = -1;\n\n        // Calculate scores and tracebacks\n        this.computeGrids();\n    }\n\n    _createClass(NeedlemanWunsch, [{\n        key: \"getScore\",\n        value: function getScore() {\n            return this.score;\n        }\n    }, {\n        key: \"getAlignments\",\n        value: function getAlignments() {\n            return this.alignments;\n        }\n\n        // Main dynamic programming procedure\n\n    }, {\n        key: \"computeGrids\",\n        value: function computeGrids() {\n            // Fill in the first row\n            for (var j = 1; j < this.jMax; j++) {\n                this.grid[0][j] = this.grid[0][j - 1] + this.gap_penalty;\n                this.tracebackGrid[0][j] = [false, false, true];\n            }\n\n            // Fill in the first column\n            for (var i = 1; i < this.iMax; i++) {\n                this.grid[i][0] = this.grid[i - 1][0] + this.gap_penalty;\n                this.tracebackGrid[i][0] = [false, true, false];\n            }\n\n            // Fill the rest of the grid\n            for (var _i2 = 1; _i2 < this.iMax; _i2++) {\n                for (var _j2 = 1; _j2 < this.jMax; _j2++) {\n                    // Find the max score(s) among [`Diag`, `Up`, `Left`]\n                    var diag = void 0;\n                    if (this.sequence1[_i2 - 1] === this.sequence2[_j2 - 1]) diag = this.grid[_i2 - 1][_j2 - 1] + this.match_score;else diag = this.grid[_i2 - 1][_j2 - 1] + this.mismatch_penalty;\n\n                    var up = this.grid[_i2 - 1][_j2] + this.gap_penalty;\n                    var left = this.grid[_i2][_j2 - 1] + this.gap_penalty;\n\n                    // If there exists multiple max values, capture them for multiple paths\n                    var maxOf = [diag, up, left];\n                    var indices = this.arrayAllMaxIndexes(maxOf);\n\n                    // Update Grids\n                    this.grid[_i2][_j2] = maxOf[indices[0]];\n                    this.tracebackGrid[_i2][_j2] = [indices.includes(0), indices.includes(1), indices.includes(2)];\n                }\n            }\n\n            // Update alignment score\n            this.score = this.grid[this.iMax - 1][this.jMax - 1];\n        }\n\n        // Gets all possible valid sequence combinations\n\n    }, {\n        key: \"alignmentTraceback\",\n        value: function alignmentTraceback() {\n            var inProcessAlignments = [];\n\n            inProcessAlignments.push({ pos: [this.sequence1.length, this.sequence2.length],\n                seq1: \"\",\n                seq2: \"\"\n            });\n\n            while (inProcessAlignments[0]) {\n                var current = inProcessAlignments[0];\n                var directions = this.tracebackGrid[current.pos[0]][current.pos[1]];\n\n                if (directions[0]) {\n                    inProcessAlignments.push({ pos: [current.pos[0] - 1, current.pos[1] - 1],\n                        seq1: this.sequence1[current.pos[0] - 1] + current.seq1,\n                        seq2: this.sequence2[current.pos[1] - 1] + current.seq2\n                    });\n                }\n                if (directions[1]) {\n                    inProcessAlignments.push({ pos: [current.pos[0] - 1, current.pos[1]],\n                        seq1: this.sequence1[current.pos[0] - 1] + current.seq1,\n                        seq2: '-' + current.seq2\n                    });\n                }\n                if (directions[2]) {\n                    inProcessAlignments.push({ pos: [current.pos[0], current.pos[1] - 1],\n                        seq1: '-' + current.seq1,\n                        seq2: this.sequence2[current.pos[1] - 1] + current.seq2\n                    });\n                }\n\n                if (current.pos[0] === 0 && current.pos[1] === 0) this.alignments.push({ sequence1: current.seq1,\n                    sequence2: current.seq2\n                });\n\n                inProcessAlignments.shift();\n            }\n\n            return this.alignments;\n        }\n\n        // Helper Functions\n\n    }, {\n        key: \"getAllIndexes\",\n        value: function getAllIndexes(arr, val) {\n            var indexes = [],\n                i = -1;\n            while ((i = arr.indexOf(val, i + 1)) !== -1) {\n                indexes.push(i);\n            }\n            return indexes;\n        }\n    }, {\n        key: \"arrayAllMaxIndexes\",\n        value: function arrayAllMaxIndexes(array) {\n            return this.getAllIndexes(array, Math.max.apply(null, array));\n        }\n    }]);\n\n    return NeedlemanWunsch;\n}();\n\nmodule.exports = NeedlemanWunsch;\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar layoutBase = function layoutBase() {\n  return;\n};\n\nlayoutBase.FDLayout = __webpack_require__(18);\nlayoutBase.FDLayoutConstants = __webpack_require__(7);\nlayoutBase.FDLayoutEdge = __webpack_require__(19);\nlayoutBase.FDLayoutNode = __webpack_require__(20);\nlayoutBase.DimensionD = __webpack_require__(21);\nlayoutBase.HashMap = __webpack_require__(22);\nlayoutBase.HashSet = __webpack_require__(23);\nlayoutBase.IGeometry = __webpack_require__(8);\nlayoutBase.IMath = __webpack_require__(9);\nlayoutBase.Integer = __webpack_require__(10);\nlayoutBase.Point = __webpack_require__(12);\nlayoutBase.PointD = __webpack_require__(4);\nlayoutBase.RandomSeed = __webpack_require__(16);\nlayoutBase.RectangleD = __webpack_require__(13);\nlayoutBase.Transform = __webpack_require__(17);\nlayoutBase.UniqueIDGeneretor = __webpack_require__(14);\nlayoutBase.Quicksort = __webpack_require__(24);\nlayoutBase.LinkedList = __webpack_require__(11);\nlayoutBase.LGraphObject = __webpack_require__(2);\nlayoutBase.LGraph = __webpack_require__(5);\nlayoutBase.LEdge = __webpack_require__(1);\nlayoutBase.LGraphManager = __webpack_require__(6);\nlayoutBase.LNode = __webpack_require__(3);\nlayoutBase.Layout = __webpack_require__(15);\nlayoutBase.LayoutConstants = __webpack_require__(0);\nlayoutBase.NeedlemanWunsch = __webpack_require__(25);\n\nmodule.exports = layoutBase;\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nfunction Emitter() {\n  this.listeners = [];\n}\n\nvar p = Emitter.prototype;\n\np.addListener = function (event, callback) {\n  this.listeners.push({\n    event: event,\n    callback: callback\n  });\n};\n\np.removeListener = function (event, callback) {\n  for (var i = this.listeners.length; i >= 0; i--) {\n    var l = this.listeners[i];\n\n    if (l.event === event && l.callback === callback) {\n      this.listeners.splice(i, 1);\n    }\n  }\n};\n\np.emit = function (event, data) {\n  for (var i = 0; i < this.listeners.length; i++) {\n    var l = this.listeners[i];\n\n    if (event === l.event) {\n      l.callback(data);\n    }\n  }\n};\n\nmodule.exports = Emitter;\n\n/***/ })\n/******/ ]);\n});", "(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"layout-base\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"layout-base\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"coseBase\"] = factory(require(\"layout-base\"));\n\telse\n\t\troot[\"coseBase\"] = factory(root[\"layoutBase\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 7);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar FDLayoutConstants = __webpack_require__(0).FDLayoutConstants;\n\nfunction CoSEConstants() {}\n\n//CoSEConstants inherits static props in FDLayoutConstants\nfor (var prop in FDLayoutConstants) {\n  CoSEConstants[prop] = FDLayoutConstants[prop];\n}\n\nCoSEConstants.DEFAULT_USE_MULTI_LEVEL_SCALING = false;\nCoSEConstants.DEFAULT_RADIAL_SEPARATION = FDLayoutConstants.DEFAULT_EDGE_LENGTH;\nCoSEConstants.DEFAULT_COMPONENT_SEPERATION = 60;\nCoSEConstants.TILE = true;\nCoSEConstants.TILING_PADDING_VERTICAL = 10;\nCoSEConstants.TILING_PADDING_HORIZONTAL = 10;\nCoSEConstants.TREE_REDUCTION_ON_INCREMENTAL = false; // make this true when cose is used incrementally as a part of other non-incremental layout\n\nmodule.exports = CoSEConstants;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar FDLayoutEdge = __webpack_require__(0).FDLayoutEdge;\n\nfunction CoSEEdge(source, target, vEdge) {\n  FDLayoutEdge.call(this, source, target, vEdge);\n}\n\nCoSEEdge.prototype = Object.create(FDLayoutEdge.prototype);\nfor (var prop in FDLayoutEdge) {\n  CoSEEdge[prop] = FDLayoutEdge[prop];\n}\n\nmodule.exports = CoSEEdge;\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar LGraph = __webpack_require__(0).LGraph;\n\nfunction CoSEGraph(parent, graphMgr, vGraph) {\n  LGraph.call(this, parent, graphMgr, vGraph);\n}\n\nCoSEGraph.prototype = Object.create(LGraph.prototype);\nfor (var prop in LGraph) {\n  CoSEGraph[prop] = LGraph[prop];\n}\n\nmodule.exports = CoSEGraph;\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar LGraphManager = __webpack_require__(0).LGraphManager;\n\nfunction CoSEGraphManager(layout) {\n  LGraphManager.call(this, layout);\n}\n\nCoSEGraphManager.prototype = Object.create(LGraphManager.prototype);\nfor (var prop in LGraphManager) {\n  CoSEGraphManager[prop] = LGraphManager[prop];\n}\n\nmodule.exports = CoSEGraphManager;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar FDLayoutNode = __webpack_require__(0).FDLayoutNode;\nvar IMath = __webpack_require__(0).IMath;\n\nfunction CoSENode(gm, loc, size, vNode) {\n  FDLayoutNode.call(this, gm, loc, size, vNode);\n}\n\nCoSENode.prototype = Object.create(FDLayoutNode.prototype);\nfor (var prop in FDLayoutNode) {\n  CoSENode[prop] = FDLayoutNode[prop];\n}\n\nCoSENode.prototype.move = function () {\n  var layout = this.graphManager.getLayout();\n  this.displacementX = layout.coolingFactor * (this.springForceX + this.repulsionForceX + this.gravitationForceX) / this.noOfChildren;\n  this.displacementY = layout.coolingFactor * (this.springForceY + this.repulsionForceY + this.gravitationForceY) / this.noOfChildren;\n\n  if (Math.abs(this.displacementX) > layout.coolingFactor * layout.maxNodeDisplacement) {\n    this.displacementX = layout.coolingFactor * layout.maxNodeDisplacement * IMath.sign(this.displacementX);\n  }\n\n  if (Math.abs(this.displacementY) > layout.coolingFactor * layout.maxNodeDisplacement) {\n    this.displacementY = layout.coolingFactor * layout.maxNodeDisplacement * IMath.sign(this.displacementY);\n  }\n\n  // a simple node, just move it\n  if (this.child == null) {\n    this.moveBy(this.displacementX, this.displacementY);\n  }\n  // an empty compound node, again just move it\n  else if (this.child.getNodes().length == 0) {\n      this.moveBy(this.displacementX, this.displacementY);\n    }\n    // non-empty compound node, propogate movement to children as well\n    else {\n        this.propogateDisplacementToChildren(this.displacementX, this.displacementY);\n      }\n\n  layout.totalDisplacement += Math.abs(this.displacementX) + Math.abs(this.displacementY);\n\n  this.springForceX = 0;\n  this.springForceY = 0;\n  this.repulsionForceX = 0;\n  this.repulsionForceY = 0;\n  this.gravitationForceX = 0;\n  this.gravitationForceY = 0;\n  this.displacementX = 0;\n  this.displacementY = 0;\n};\n\nCoSENode.prototype.propogateDisplacementToChildren = function (dX, dY) {\n  var nodes = this.getChild().getNodes();\n  var node;\n  for (var i = 0; i < nodes.length; i++) {\n    node = nodes[i];\n    if (node.getChild() == null) {\n      node.moveBy(dX, dY);\n      node.displacementX += dX;\n      node.displacementY += dY;\n    } else {\n      node.propogateDisplacementToChildren(dX, dY);\n    }\n  }\n};\n\nCoSENode.prototype.setPred1 = function (pred1) {\n  this.pred1 = pred1;\n};\n\nCoSENode.prototype.getPred1 = function () {\n  return pred1;\n};\n\nCoSENode.prototype.getPred2 = function () {\n  return pred2;\n};\n\nCoSENode.prototype.setNext = function (next) {\n  this.next = next;\n};\n\nCoSENode.prototype.getNext = function () {\n  return next;\n};\n\nCoSENode.prototype.setProcessed = function (processed) {\n  this.processed = processed;\n};\n\nCoSENode.prototype.isProcessed = function () {\n  return processed;\n};\n\nmodule.exports = CoSENode;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar FDLayout = __webpack_require__(0).FDLayout;\nvar CoSEGraphManager = __webpack_require__(4);\nvar CoSEGraph = __webpack_require__(3);\nvar CoSENode = __webpack_require__(5);\nvar CoSEEdge = __webpack_require__(2);\nvar CoSEConstants = __webpack_require__(1);\nvar FDLayoutConstants = __webpack_require__(0).FDLayoutConstants;\nvar LayoutConstants = __webpack_require__(0).LayoutConstants;\nvar Point = __webpack_require__(0).Point;\nvar PointD = __webpack_require__(0).PointD;\nvar Layout = __webpack_require__(0).Layout;\nvar Integer = __webpack_require__(0).Integer;\nvar IGeometry = __webpack_require__(0).IGeometry;\nvar LGraph = __webpack_require__(0).LGraph;\nvar Transform = __webpack_require__(0).Transform;\n\nfunction CoSELayout() {\n  FDLayout.call(this);\n\n  this.toBeTiled = {}; // Memorize if a node is to be tiled or is tiled\n}\n\nCoSELayout.prototype = Object.create(FDLayout.prototype);\n\nfor (var prop in FDLayout) {\n  CoSELayout[prop] = FDLayout[prop];\n}\n\nCoSELayout.prototype.newGraphManager = function () {\n  var gm = new CoSEGraphManager(this);\n  this.graphManager = gm;\n  return gm;\n};\n\nCoSELayout.prototype.newGraph = function (vGraph) {\n  return new CoSEGraph(null, this.graphManager, vGraph);\n};\n\nCoSELayout.prototype.newNode = function (vNode) {\n  return new CoSENode(this.graphManager, vNode);\n};\n\nCoSELayout.prototype.newEdge = function (vEdge) {\n  return new CoSEEdge(null, null, vEdge);\n};\n\nCoSELayout.prototype.initParameters = function () {\n  FDLayout.prototype.initParameters.call(this, arguments);\n  if (!this.isSubLayout) {\n    if (CoSEConstants.DEFAULT_EDGE_LENGTH < 10) {\n      this.idealEdgeLength = 10;\n    } else {\n      this.idealEdgeLength = CoSEConstants.DEFAULT_EDGE_LENGTH;\n    }\n\n    this.useSmartIdealEdgeLengthCalculation = CoSEConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION;\n    this.springConstant = FDLayoutConstants.DEFAULT_SPRING_STRENGTH;\n    this.repulsionConstant = FDLayoutConstants.DEFAULT_REPULSION_STRENGTH;\n    this.gravityConstant = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH;\n    this.compoundGravityConstant = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH;\n    this.gravityRangeFactor = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR;\n    this.compoundGravityRangeFactor = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR;\n\n    // variables for tree reduction support\n    this.prunedNodesAll = [];\n    this.growTreeIterations = 0;\n    this.afterGrowthIterations = 0;\n    this.isTreeGrowing = false;\n    this.isGrowthFinished = false;\n\n    // variables for cooling\n    this.coolingCycle = 0;\n    this.maxCoolingCycle = this.maxIterations / FDLayoutConstants.CONVERGENCE_CHECK_PERIOD;\n    this.finalTemperature = FDLayoutConstants.CONVERGENCE_CHECK_PERIOD / this.maxIterations;\n    this.coolingAdjuster = 1;\n  }\n};\n\nCoSELayout.prototype.layout = function () {\n  var createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;\n  if (createBendsAsNeeded) {\n    this.createBendpoints();\n    this.graphManager.resetAllEdges();\n  }\n\n  this.level = 0;\n  return this.classicLayout();\n};\n\nCoSELayout.prototype.classicLayout = function () {\n  this.nodesWithGravity = this.calculateNodesToApplyGravitationTo();\n  this.graphManager.setAllNodesToApplyGravitation(this.nodesWithGravity);\n  this.calcNoOfChildrenForAllNodes();\n  this.graphManager.calcLowestCommonAncestors();\n  this.graphManager.calcInclusionTreeDepths();\n  this.graphManager.getRoot().calcEstimatedSize();\n  this.calcIdealEdgeLengths();\n\n  if (!this.incremental) {\n    var forest = this.getFlatForest();\n\n    // The graph associated with this layout is flat and a forest\n    if (forest.length > 0) {\n      this.positionNodesRadially(forest);\n    }\n    // The graph associated with this layout is not flat or a forest\n    else {\n        // Reduce the trees when incremental mode is not enabled and graph is not a forest \n        this.reduceTrees();\n        // Update nodes that gravity will be applied\n        this.graphManager.resetAllNodesToApplyGravitation();\n        var allNodes = new Set(this.getAllNodes());\n        var intersection = this.nodesWithGravity.filter(function (x) {\n          return allNodes.has(x);\n        });\n        this.graphManager.setAllNodesToApplyGravitation(intersection);\n\n        this.positionNodesRandomly();\n      }\n  } else {\n    if (CoSEConstants.TREE_REDUCTION_ON_INCREMENTAL) {\n      // Reduce the trees in incremental mode if only this constant is set to true \n      this.reduceTrees();\n      // Update nodes that gravity will be applied\n      this.graphManager.resetAllNodesToApplyGravitation();\n      var allNodes = new Set(this.getAllNodes());\n      var intersection = this.nodesWithGravity.filter(function (x) {\n        return allNodes.has(x);\n      });\n      this.graphManager.setAllNodesToApplyGravitation(intersection);\n    }\n  }\n\n  this.initSpringEmbedder();\n  this.runSpringEmbedder();\n\n  return true;\n};\n\nCoSELayout.prototype.tick = function () {\n  this.totalIterations++;\n\n  if (this.totalIterations === this.maxIterations && !this.isTreeGrowing && !this.isGrowthFinished) {\n    if (this.prunedNodesAll.length > 0) {\n      this.isTreeGrowing = true;\n    } else {\n      return true;\n    }\n  }\n\n  if (this.totalIterations % FDLayoutConstants.CONVERGENCE_CHECK_PERIOD == 0 && !this.isTreeGrowing && !this.isGrowthFinished) {\n    if (this.isConverged()) {\n      if (this.prunedNodesAll.length > 0) {\n        this.isTreeGrowing = true;\n      } else {\n        return true;\n      }\n    }\n\n    this.coolingCycle++;\n\n    if (this.layoutQuality == 0) {\n      // quality - \"draft\"\n      this.coolingAdjuster = this.coolingCycle;\n    } else if (this.layoutQuality == 1) {\n      // quality - \"default\"\n      this.coolingAdjuster = this.coolingCycle / 3;\n    }\n\n    // cooling schedule is based on http://www.btluke.com/simanf1.html -> cooling schedule 3\n    this.coolingFactor = Math.max(this.initialCoolingFactor - Math.pow(this.coolingCycle, Math.log(100 * (this.initialCoolingFactor - this.finalTemperature)) / Math.log(this.maxCoolingCycle)) / 100 * this.coolingAdjuster, this.finalTemperature);\n    this.animationPeriod = Math.ceil(this.initialAnimationPeriod * Math.sqrt(this.coolingFactor));\n  }\n  // Operations while tree is growing again \n  if (this.isTreeGrowing) {\n    if (this.growTreeIterations % 10 == 0) {\n      if (this.prunedNodesAll.length > 0) {\n        this.graphManager.updateBounds();\n        this.updateGrid();\n        this.growTree(this.prunedNodesAll);\n        // Update nodes that gravity will be applied\n        this.graphManager.resetAllNodesToApplyGravitation();\n        var allNodes = new Set(this.getAllNodes());\n        var intersection = this.nodesWithGravity.filter(function (x) {\n          return allNodes.has(x);\n        });\n        this.graphManager.setAllNodesToApplyGravitation(intersection);\n\n        this.graphManager.updateBounds();\n        this.updateGrid();\n        this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;\n      } else {\n        this.isTreeGrowing = false;\n        this.isGrowthFinished = true;\n      }\n    }\n    this.growTreeIterations++;\n  }\n  // Operations after growth is finished\n  if (this.isGrowthFinished) {\n    if (this.isConverged()) {\n      return true;\n    }\n    if (this.afterGrowthIterations % 10 == 0) {\n      this.graphManager.updateBounds();\n      this.updateGrid();\n    }\n    this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL * ((100 - this.afterGrowthIterations) / 100);\n    this.afterGrowthIterations++;\n  }\n\n  var gridUpdateAllowed = !this.isTreeGrowing && !this.isGrowthFinished;\n  var forceToNodeSurroundingUpdate = this.growTreeIterations % 10 == 1 && this.isTreeGrowing || this.afterGrowthIterations % 10 == 1 && this.isGrowthFinished;\n\n  this.totalDisplacement = 0;\n  this.graphManager.updateBounds();\n  this.calcSpringForces();\n  this.calcRepulsionForces(gridUpdateAllowed, forceToNodeSurroundingUpdate);\n  this.calcGravitationalForces();\n  this.moveNodes();\n  this.animate();\n\n  return false; // Layout is not ended yet return false\n};\n\nCoSELayout.prototype.getPositionsData = function () {\n  var allNodes = this.graphManager.getAllNodes();\n  var pData = {};\n  for (var i = 0; i < allNodes.length; i++) {\n    var rect = allNodes[i].rect;\n    var id = allNodes[i].id;\n    pData[id] = {\n      id: id,\n      x: rect.getCenterX(),\n      y: rect.getCenterY(),\n      w: rect.width,\n      h: rect.height\n    };\n  }\n\n  return pData;\n};\n\nCoSELayout.prototype.runSpringEmbedder = function () {\n  this.initialAnimationPeriod = 25;\n  this.animationPeriod = this.initialAnimationPeriod;\n  var layoutEnded = false;\n\n  // If aminate option is 'during' signal that layout is supposed to start iterating\n  if (FDLayoutConstants.ANIMATE === 'during') {\n    this.emit('layoutstarted');\n  } else {\n    // If aminate option is 'during' tick() function will be called on index.js\n    while (!layoutEnded) {\n      layoutEnded = this.tick();\n    }\n\n    this.graphManager.updateBounds();\n  }\n};\n\nCoSELayout.prototype.calculateNodesToApplyGravitationTo = function () {\n  var nodeList = [];\n  var graph;\n\n  var graphs = this.graphManager.getGraphs();\n  var size = graphs.length;\n  var i;\n  for (i = 0; i < size; i++) {\n    graph = graphs[i];\n\n    graph.updateConnected();\n\n    if (!graph.isConnected) {\n      nodeList = nodeList.concat(graph.getNodes());\n    }\n  }\n\n  return nodeList;\n};\n\nCoSELayout.prototype.createBendpoints = function () {\n  var edges = [];\n  edges = edges.concat(this.graphManager.getAllEdges());\n  var visited = new Set();\n  var i;\n  for (i = 0; i < edges.length; i++) {\n    var edge = edges[i];\n\n    if (!visited.has(edge)) {\n      var source = edge.getSource();\n      var target = edge.getTarget();\n\n      if (source == target) {\n        edge.getBendpoints().push(new PointD());\n        edge.getBendpoints().push(new PointD());\n        this.createDummyNodesForBendpoints(edge);\n        visited.add(edge);\n      } else {\n        var edgeList = [];\n\n        edgeList = edgeList.concat(source.getEdgeListToNode(target));\n        edgeList = edgeList.concat(target.getEdgeListToNode(source));\n\n        if (!visited.has(edgeList[0])) {\n          if (edgeList.length > 1) {\n            var k;\n            for (k = 0; k < edgeList.length; k++) {\n              var multiEdge = edgeList[k];\n              multiEdge.getBendpoints().push(new PointD());\n              this.createDummyNodesForBendpoints(multiEdge);\n            }\n          }\n          edgeList.forEach(function (edge) {\n            visited.add(edge);\n          });\n        }\n      }\n    }\n\n    if (visited.size == edges.length) {\n      break;\n    }\n  }\n};\n\nCoSELayout.prototype.positionNodesRadially = function (forest) {\n  // We tile the trees to a grid row by row; first tree starts at (0,0)\n  var currentStartingPoint = new Point(0, 0);\n  var numberOfColumns = Math.ceil(Math.sqrt(forest.length));\n  var height = 0;\n  var currentY = 0;\n  var currentX = 0;\n  var point = new PointD(0, 0);\n\n  for (var i = 0; i < forest.length; i++) {\n    if (i % numberOfColumns == 0) {\n      // Start of a new row, make the x coordinate 0, increment the\n      // y coordinate with the max height of the previous row\n      currentX = 0;\n      currentY = height;\n\n      if (i != 0) {\n        currentY += CoSEConstants.DEFAULT_COMPONENT_SEPERATION;\n      }\n\n      height = 0;\n    }\n\n    var tree = forest[i];\n\n    // Find the center of the tree\n    var centerNode = Layout.findCenterOfTree(tree);\n\n    // Set the staring point of the next tree\n    currentStartingPoint.x = currentX;\n    currentStartingPoint.y = currentY;\n\n    // Do a radial layout starting with the center\n    point = CoSELayout.radialLayout(tree, centerNode, currentStartingPoint);\n\n    if (point.y > height) {\n      height = Math.floor(point.y);\n    }\n\n    currentX = Math.floor(point.x + CoSEConstants.DEFAULT_COMPONENT_SEPERATION);\n  }\n\n  this.transform(new PointD(LayoutConstants.WORLD_CENTER_X - point.x / 2, LayoutConstants.WORLD_CENTER_Y - point.y / 2));\n};\n\nCoSELayout.radialLayout = function (tree, centerNode, startingPoint) {\n  var radialSep = Math.max(this.maxDiagonalInTree(tree), CoSEConstants.DEFAULT_RADIAL_SEPARATION);\n  CoSELayout.branchRadialLayout(centerNode, null, 0, 359, 0, radialSep);\n  var bounds = LGraph.calculateBounds(tree);\n\n  var transform = new Transform();\n  transform.setDeviceOrgX(bounds.getMinX());\n  transform.setDeviceOrgY(bounds.getMinY());\n  transform.setWorldOrgX(startingPoint.x);\n  transform.setWorldOrgY(startingPoint.y);\n\n  for (var i = 0; i < tree.length; i++) {\n    var node = tree[i];\n    node.transform(transform);\n  }\n\n  var bottomRight = new PointD(bounds.getMaxX(), bounds.getMaxY());\n\n  return transform.inverseTransformPoint(bottomRight);\n};\n\nCoSELayout.branchRadialLayout = function (node, parentOfNode, startAngle, endAngle, distance, radialSeparation) {\n  // First, position this node by finding its angle.\n  var halfInterval = (endAngle - startAngle + 1) / 2;\n\n  if (halfInterval < 0) {\n    halfInterval += 180;\n  }\n\n  var nodeAngle = (halfInterval + startAngle) % 360;\n  var teta = nodeAngle * IGeometry.TWO_PI / 360;\n\n  // Make polar to java cordinate conversion.\n  var cos_teta = Math.cos(teta);\n  var x_ = distance * Math.cos(teta);\n  var y_ = distance * Math.sin(teta);\n\n  node.setCenter(x_, y_);\n\n  // Traverse all neighbors of this node and recursively call this\n  // function.\n  var neighborEdges = [];\n  neighborEdges = neighborEdges.concat(node.getEdges());\n  var childCount = neighborEdges.length;\n\n  if (parentOfNode != null) {\n    childCount--;\n  }\n\n  var branchCount = 0;\n\n  var incEdgesCount = neighborEdges.length;\n  var startIndex;\n\n  var edges = node.getEdgesBetween(parentOfNode);\n\n  // If there are multiple edges, prune them until there remains only one\n  // edge.\n  while (edges.length > 1) {\n    //neighborEdges.remove(edges.remove(0));\n    var temp = edges[0];\n    edges.splice(0, 1);\n    var index = neighborEdges.indexOf(temp);\n    if (index >= 0) {\n      neighborEdges.splice(index, 1);\n    }\n    incEdgesCount--;\n    childCount--;\n  }\n\n  if (parentOfNode != null) {\n    //assert edges.length == 1;\n    startIndex = (neighborEdges.indexOf(edges[0]) + 1) % incEdgesCount;\n  } else {\n    startIndex = 0;\n  }\n\n  var stepAngle = Math.abs(endAngle - startAngle) / childCount;\n\n  for (var i = startIndex; branchCount != childCount; i = ++i % incEdgesCount) {\n    var currentNeighbor = neighborEdges[i].getOtherEnd(node);\n\n    // Don't back traverse to root node in current tree.\n    if (currentNeighbor == parentOfNode) {\n      continue;\n    }\n\n    var childStartAngle = (startAngle + branchCount * stepAngle) % 360;\n    var childEndAngle = (childStartAngle + stepAngle) % 360;\n\n    CoSELayout.branchRadialLayout(currentNeighbor, node, childStartAngle, childEndAngle, distance + radialSeparation, radialSeparation);\n\n    branchCount++;\n  }\n};\n\nCoSELayout.maxDiagonalInTree = function (tree) {\n  var maxDiagonal = Integer.MIN_VALUE;\n\n  for (var i = 0; i < tree.length; i++) {\n    var node = tree[i];\n    var diagonal = node.getDiagonal();\n\n    if (diagonal > maxDiagonal) {\n      maxDiagonal = diagonal;\n    }\n  }\n\n  return maxDiagonal;\n};\n\nCoSELayout.prototype.calcRepulsionRange = function () {\n  // formula is 2 x (level + 1) x idealEdgeLength\n  return 2 * (this.level + 1) * this.idealEdgeLength;\n};\n\n// Tiling methods\n\n// Group zero degree members whose parents are not to be tiled, create dummy parents where needed and fill memberGroups by their dummp parent id's\nCoSELayout.prototype.groupZeroDegreeMembers = function () {\n  var self = this;\n  // array of [parent_id x oneDegreeNode_id]\n  var tempMemberGroups = {}; // A temporary map of parent node and its zero degree members\n  this.memberGroups = {}; // A map of dummy parent node and its zero degree members whose parents are not to be tiled\n  this.idToDummyNode = {}; // A map of id to dummy node \n\n  var zeroDegree = []; // List of zero degree nodes whose parents are not to be tiled\n  var allNodes = this.graphManager.getAllNodes();\n\n  // Fill zero degree list\n  for (var i = 0; i < allNodes.length; i++) {\n    var node = allNodes[i];\n    var parent = node.getParent();\n    // If a node has zero degree and its parent is not to be tiled if exists add that node to zeroDegres list\n    if (this.getNodeDegreeWithChildren(node) === 0 && (parent.id == undefined || !this.getToBeTiled(parent))) {\n      zeroDegree.push(node);\n    }\n  }\n\n  // Create a map of parent node and its zero degree members\n  for (var i = 0; i < zeroDegree.length; i++) {\n    var node = zeroDegree[i]; // Zero degree node itself\n    var p_id = node.getParent().id; // Parent id\n\n    if (typeof tempMemberGroups[p_id] === \"undefined\") tempMemberGroups[p_id] = [];\n\n    tempMemberGroups[p_id] = tempMemberGroups[p_id].concat(node); // Push node to the list belongs to its parent in tempMemberGroups\n  }\n\n  // If there are at least two nodes at a level, create a dummy compound for them\n  Object.keys(tempMemberGroups).forEach(function (p_id) {\n    if (tempMemberGroups[p_id].length > 1) {\n      var dummyCompoundId = \"DummyCompound_\" + p_id; // The id of dummy compound which will be created soon\n      self.memberGroups[dummyCompoundId] = tempMemberGroups[p_id]; // Add dummy compound to memberGroups\n\n      var parent = tempMemberGroups[p_id][0].getParent(); // The parent of zero degree nodes will be the parent of new dummy compound\n\n      // Create a dummy compound with calculated id\n      var dummyCompound = new CoSENode(self.graphManager);\n      dummyCompound.id = dummyCompoundId;\n      dummyCompound.paddingLeft = parent.paddingLeft || 0;\n      dummyCompound.paddingRight = parent.paddingRight || 0;\n      dummyCompound.paddingBottom = parent.paddingBottom || 0;\n      dummyCompound.paddingTop = parent.paddingTop || 0;\n\n      self.idToDummyNode[dummyCompoundId] = dummyCompound;\n\n      var dummyParentGraph = self.getGraphManager().add(self.newGraph(), dummyCompound);\n      var parentGraph = parent.getChild();\n\n      // Add dummy compound to parent the graph\n      parentGraph.add(dummyCompound);\n\n      // For each zero degree node in this level remove it from its parent graph and add it to the graph of dummy parent\n      for (var i = 0; i < tempMemberGroups[p_id].length; i++) {\n        var node = tempMemberGroups[p_id][i];\n\n        parentGraph.remove(node);\n        dummyParentGraph.add(node);\n      }\n    }\n  });\n};\n\nCoSELayout.prototype.clearCompounds = function () {\n  var childGraphMap = {};\n  var idToNode = {};\n\n  // Get compound ordering by finding the inner one first\n  this.performDFSOnCompounds();\n\n  for (var i = 0; i < this.compoundOrder.length; i++) {\n\n    idToNode[this.compoundOrder[i].id] = this.compoundOrder[i];\n    childGraphMap[this.compoundOrder[i].id] = [].concat(this.compoundOrder[i].getChild().getNodes());\n\n    // Remove children of compounds\n    this.graphManager.remove(this.compoundOrder[i].getChild());\n    this.compoundOrder[i].child = null;\n  }\n\n  this.graphManager.resetAllNodes();\n\n  // Tile the removed children\n  this.tileCompoundMembers(childGraphMap, idToNode);\n};\n\nCoSELayout.prototype.clearZeroDegreeMembers = function () {\n  var self = this;\n  var tiledZeroDegreePack = this.tiledZeroDegreePack = [];\n\n  Object.keys(this.memberGroups).forEach(function (id) {\n    var compoundNode = self.idToDummyNode[id]; // Get the dummy compound\n\n    tiledZeroDegreePack[id] = self.tileNodes(self.memberGroups[id], compoundNode.paddingLeft + compoundNode.paddingRight);\n\n    // Set the width and height of the dummy compound as calculated\n    compoundNode.rect.width = tiledZeroDegreePack[id].width;\n    compoundNode.rect.height = tiledZeroDegreePack[id].height;\n  });\n};\n\nCoSELayout.prototype.repopulateCompounds = function () {\n  for (var i = this.compoundOrder.length - 1; i >= 0; i--) {\n    var lCompoundNode = this.compoundOrder[i];\n    var id = lCompoundNode.id;\n    var horizontalMargin = lCompoundNode.paddingLeft;\n    var verticalMargin = lCompoundNode.paddingTop;\n\n    this.adjustLocations(this.tiledMemberPack[id], lCompoundNode.rect.x, lCompoundNode.rect.y, horizontalMargin, verticalMargin);\n  }\n};\n\nCoSELayout.prototype.repopulateZeroDegreeMembers = function () {\n  var self = this;\n  var tiledPack = this.tiledZeroDegreePack;\n\n  Object.keys(tiledPack).forEach(function (id) {\n    var compoundNode = self.idToDummyNode[id]; // Get the dummy compound by its id\n    var horizontalMargin = compoundNode.paddingLeft;\n    var verticalMargin = compoundNode.paddingTop;\n\n    // Adjust the positions of nodes wrt its compound\n    self.adjustLocations(tiledPack[id], compoundNode.rect.x, compoundNode.rect.y, horizontalMargin, verticalMargin);\n  });\n};\n\nCoSELayout.prototype.getToBeTiled = function (node) {\n  var id = node.id;\n  //firstly check the previous results\n  if (this.toBeTiled[id] != null) {\n    return this.toBeTiled[id];\n  }\n\n  //only compound nodes are to be tiled\n  var childGraph = node.getChild();\n  if (childGraph == null) {\n    this.toBeTiled[id] = false;\n    return false;\n  }\n\n  var children = childGraph.getNodes(); // Get the children nodes\n\n  //a compound node is not to be tiled if all of its compound children are not to be tiled\n  for (var i = 0; i < children.length; i++) {\n    var theChild = children[i];\n\n    if (this.getNodeDegree(theChild) > 0) {\n      this.toBeTiled[id] = false;\n      return false;\n    }\n\n    //pass the children not having the compound structure\n    if (theChild.getChild() == null) {\n      this.toBeTiled[theChild.id] = false;\n      continue;\n    }\n\n    if (!this.getToBeTiled(theChild)) {\n      this.toBeTiled[id] = false;\n      return false;\n    }\n  }\n  this.toBeTiled[id] = true;\n  return true;\n};\n\n// Get degree of a node depending of its edges and independent of its children\nCoSELayout.prototype.getNodeDegree = function (node) {\n  var id = node.id;\n  var edges = node.getEdges();\n  var degree = 0;\n\n  // For the edges connected\n  for (var i = 0; i < edges.length; i++) {\n    var edge = edges[i];\n    if (edge.getSource().id !== edge.getTarget().id) {\n      degree = degree + 1;\n    }\n  }\n  return degree;\n};\n\n// Get degree of a node with its children\nCoSELayout.prototype.getNodeDegreeWithChildren = function (node) {\n  var degree = this.getNodeDegree(node);\n  if (node.getChild() == null) {\n    return degree;\n  }\n  var children = node.getChild().getNodes();\n  for (var i = 0; i < children.length; i++) {\n    var child = children[i];\n    degree += this.getNodeDegreeWithChildren(child);\n  }\n  return degree;\n};\n\nCoSELayout.prototype.performDFSOnCompounds = function () {\n  this.compoundOrder = [];\n  this.fillCompexOrderByDFS(this.graphManager.getRoot().getNodes());\n};\n\nCoSELayout.prototype.fillCompexOrderByDFS = function (children) {\n  for (var i = 0; i < children.length; i++) {\n    var child = children[i];\n    if (child.getChild() != null) {\n      this.fillCompexOrderByDFS(child.getChild().getNodes());\n    }\n    if (this.getToBeTiled(child)) {\n      this.compoundOrder.push(child);\n    }\n  }\n};\n\n/**\n* This method places each zero degree member wrt given (x,y) coordinates (top left).\n*/\nCoSELayout.prototype.adjustLocations = function (organization, x, y, compoundHorizontalMargin, compoundVerticalMargin) {\n  x += compoundHorizontalMargin;\n  y += compoundVerticalMargin;\n\n  var left = x;\n\n  for (var i = 0; i < organization.rows.length; i++) {\n    var row = organization.rows[i];\n    x = left;\n    var maxHeight = 0;\n\n    for (var j = 0; j < row.length; j++) {\n      var lnode = row[j];\n\n      lnode.rect.x = x; // + lnode.rect.width / 2;\n      lnode.rect.y = y; // + lnode.rect.height / 2;\n\n      x += lnode.rect.width + organization.horizontalPadding;\n\n      if (lnode.rect.height > maxHeight) maxHeight = lnode.rect.height;\n    }\n\n    y += maxHeight + organization.verticalPadding;\n  }\n};\n\nCoSELayout.prototype.tileCompoundMembers = function (childGraphMap, idToNode) {\n  var self = this;\n  this.tiledMemberPack = [];\n\n  Object.keys(childGraphMap).forEach(function (id) {\n    // Get the compound node\n    var compoundNode = idToNode[id];\n\n    self.tiledMemberPack[id] = self.tileNodes(childGraphMap[id], compoundNode.paddingLeft + compoundNode.paddingRight);\n\n    compoundNode.rect.width = self.tiledMemberPack[id].width;\n    compoundNode.rect.height = self.tiledMemberPack[id].height;\n  });\n};\n\nCoSELayout.prototype.tileNodes = function (nodes, minWidth) {\n  var verticalPadding = CoSEConstants.TILING_PADDING_VERTICAL;\n  var horizontalPadding = CoSEConstants.TILING_PADDING_HORIZONTAL;\n  var organization = {\n    rows: [],\n    rowWidth: [],\n    rowHeight: [],\n    width: 0,\n    height: minWidth, // assume minHeight equals to minWidth\n    verticalPadding: verticalPadding,\n    horizontalPadding: horizontalPadding\n  };\n\n  // Sort the nodes in ascending order of their areas\n  nodes.sort(function (n1, n2) {\n    if (n1.rect.width * n1.rect.height > n2.rect.width * n2.rect.height) return -1;\n    if (n1.rect.width * n1.rect.height < n2.rect.width * n2.rect.height) return 1;\n    return 0;\n  });\n\n  // Create the organization -> tile members\n  for (var i = 0; i < nodes.length; i++) {\n    var lNode = nodes[i];\n\n    if (organization.rows.length == 0) {\n      this.insertNodeToRow(organization, lNode, 0, minWidth);\n    } else if (this.canAddHorizontal(organization, lNode.rect.width, lNode.rect.height)) {\n      this.insertNodeToRow(organization, lNode, this.getShortestRowIndex(organization), minWidth);\n    } else {\n      this.insertNodeToRow(organization, lNode, organization.rows.length, minWidth);\n    }\n\n    this.shiftToLastRow(organization);\n  }\n\n  return organization;\n};\n\nCoSELayout.prototype.insertNodeToRow = function (organization, node, rowIndex, minWidth) {\n  var minCompoundSize = minWidth;\n\n  // Add new row if needed\n  if (rowIndex == organization.rows.length) {\n    var secondDimension = [];\n\n    organization.rows.push(secondDimension);\n    organization.rowWidth.push(minCompoundSize);\n    organization.rowHeight.push(0);\n  }\n\n  // Update row width\n  var w = organization.rowWidth[rowIndex] + node.rect.width;\n\n  if (organization.rows[rowIndex].length > 0) {\n    w += organization.horizontalPadding;\n  }\n\n  organization.rowWidth[rowIndex] = w;\n  // Update compound width\n  if (organization.width < w) {\n    organization.width = w;\n  }\n\n  // Update height\n  var h = node.rect.height;\n  if (rowIndex > 0) h += organization.verticalPadding;\n\n  var extraHeight = 0;\n  if (h > organization.rowHeight[rowIndex]) {\n    extraHeight = organization.rowHeight[rowIndex];\n    organization.rowHeight[rowIndex] = h;\n    extraHeight = organization.rowHeight[rowIndex] - extraHeight;\n  }\n\n  organization.height += extraHeight;\n\n  // Insert node\n  organization.rows[rowIndex].push(node);\n};\n\n//Scans the rows of an organization and returns the one with the min width\nCoSELayout.prototype.getShortestRowIndex = function (organization) {\n  var r = -1;\n  var min = Number.MAX_VALUE;\n\n  for (var i = 0; i < organization.rows.length; i++) {\n    if (organization.rowWidth[i] < min) {\n      r = i;\n      min = organization.rowWidth[i];\n    }\n  }\n  return r;\n};\n\n//Scans the rows of an organization and returns the one with the max width\nCoSELayout.prototype.getLongestRowIndex = function (organization) {\n  var r = -1;\n  var max = Number.MIN_VALUE;\n\n  for (var i = 0; i < organization.rows.length; i++) {\n\n    if (organization.rowWidth[i] > max) {\n      r = i;\n      max = organization.rowWidth[i];\n    }\n  }\n\n  return r;\n};\n\n/**\n* This method checks whether adding extra width to the organization violates\n* the aspect ratio(1) or not.\n*/\nCoSELayout.prototype.canAddHorizontal = function (organization, extraWidth, extraHeight) {\n\n  var sri = this.getShortestRowIndex(organization);\n\n  if (sri < 0) {\n    return true;\n  }\n\n  var min = organization.rowWidth[sri];\n\n  if (min + organization.horizontalPadding + extraWidth <= organization.width) return true;\n\n  var hDiff = 0;\n\n  // Adding to an existing row\n  if (organization.rowHeight[sri] < extraHeight) {\n    if (sri > 0) hDiff = extraHeight + organization.verticalPadding - organization.rowHeight[sri];\n  }\n\n  var add_to_row_ratio;\n  if (organization.width - min >= extraWidth + organization.horizontalPadding) {\n    add_to_row_ratio = (organization.height + hDiff) / (min + extraWidth + organization.horizontalPadding);\n  } else {\n    add_to_row_ratio = (organization.height + hDiff) / organization.width;\n  }\n\n  // Adding a new row for this node\n  hDiff = extraHeight + organization.verticalPadding;\n  var add_new_row_ratio;\n  if (organization.width < extraWidth) {\n    add_new_row_ratio = (organization.height + hDiff) / extraWidth;\n  } else {\n    add_new_row_ratio = (organization.height + hDiff) / organization.width;\n  }\n\n  if (add_new_row_ratio < 1) add_new_row_ratio = 1 / add_new_row_ratio;\n\n  if (add_to_row_ratio < 1) add_to_row_ratio = 1 / add_to_row_ratio;\n\n  return add_to_row_ratio < add_new_row_ratio;\n};\n\n//If moving the last node from the longest row and adding it to the last\n//row makes the bounding box smaller, do it.\nCoSELayout.prototype.shiftToLastRow = function (organization) {\n  var longest = this.getLongestRowIndex(organization);\n  var last = organization.rowWidth.length - 1;\n  var row = organization.rows[longest];\n  var node = row[row.length - 1];\n\n  var diff = node.width + organization.horizontalPadding;\n\n  // Check if there is enough space on the last row\n  if (organization.width - organization.rowWidth[last] > diff && longest != last) {\n    // Remove the last element of the longest row\n    row.splice(-1, 1);\n\n    // Push it to the last row\n    organization.rows[last].push(node);\n\n    organization.rowWidth[longest] = organization.rowWidth[longest] - diff;\n    organization.rowWidth[last] = organization.rowWidth[last] + diff;\n    organization.width = organization.rowWidth[instance.getLongestRowIndex(organization)];\n\n    // Update heights of the organization\n    var maxHeight = Number.MIN_VALUE;\n    for (var i = 0; i < row.length; i++) {\n      if (row[i].height > maxHeight) maxHeight = row[i].height;\n    }\n    if (longest > 0) maxHeight += organization.verticalPadding;\n\n    var prevTotal = organization.rowHeight[longest] + organization.rowHeight[last];\n\n    organization.rowHeight[longest] = maxHeight;\n    if (organization.rowHeight[last] < node.height + organization.verticalPadding) organization.rowHeight[last] = node.height + organization.verticalPadding;\n\n    var finalTotal = organization.rowHeight[longest] + organization.rowHeight[last];\n    organization.height += finalTotal - prevTotal;\n\n    this.shiftToLastRow(organization);\n  }\n};\n\nCoSELayout.prototype.tilingPreLayout = function () {\n  if (CoSEConstants.TILE) {\n    // Find zero degree nodes and create a compound for each level\n    this.groupZeroDegreeMembers();\n    // Tile and clear children of each compound\n    this.clearCompounds();\n    // Separately tile and clear zero degree nodes for each level\n    this.clearZeroDegreeMembers();\n  }\n};\n\nCoSELayout.prototype.tilingPostLayout = function () {\n  if (CoSEConstants.TILE) {\n    this.repopulateZeroDegreeMembers();\n    this.repopulateCompounds();\n  }\n};\n\n// -----------------------------------------------------------------------------\n// Section: Tree Reduction methods\n// -----------------------------------------------------------------------------\n// Reduce trees \nCoSELayout.prototype.reduceTrees = function () {\n  var prunedNodesAll = [];\n  var containsLeaf = true;\n  var node;\n\n  while (containsLeaf) {\n    var allNodes = this.graphManager.getAllNodes();\n    var prunedNodesInStepTemp = [];\n    containsLeaf = false;\n\n    for (var i = 0; i < allNodes.length; i++) {\n      node = allNodes[i];\n      if (node.getEdges().length == 1 && !node.getEdges()[0].isInterGraph && node.getChild() == null) {\n        prunedNodesInStepTemp.push([node, node.getEdges()[0], node.getOwner()]);\n        containsLeaf = true;\n      }\n    }\n    if (containsLeaf == true) {\n      var prunedNodesInStep = [];\n      for (var j = 0; j < prunedNodesInStepTemp.length; j++) {\n        if (prunedNodesInStepTemp[j][0].getEdges().length == 1) {\n          prunedNodesInStep.push(prunedNodesInStepTemp[j]);\n          prunedNodesInStepTemp[j][0].getOwner().remove(prunedNodesInStepTemp[j][0]);\n        }\n      }\n      prunedNodesAll.push(prunedNodesInStep);\n      this.graphManager.resetAllNodes();\n      this.graphManager.resetAllEdges();\n    }\n  }\n  this.prunedNodesAll = prunedNodesAll;\n};\n\n// Grow tree one step \nCoSELayout.prototype.growTree = function (prunedNodesAll) {\n  var lengthOfPrunedNodesInStep = prunedNodesAll.length;\n  var prunedNodesInStep = prunedNodesAll[lengthOfPrunedNodesInStep - 1];\n\n  var nodeData;\n  for (var i = 0; i < prunedNodesInStep.length; i++) {\n    nodeData = prunedNodesInStep[i];\n\n    this.findPlaceforPrunedNode(nodeData);\n\n    nodeData[2].add(nodeData[0]);\n    nodeData[2].add(nodeData[1], nodeData[1].source, nodeData[1].target);\n  }\n\n  prunedNodesAll.splice(prunedNodesAll.length - 1, 1);\n  this.graphManager.resetAllNodes();\n  this.graphManager.resetAllEdges();\n};\n\n// Find an appropriate position to replace pruned node, this method can be improved\nCoSELayout.prototype.findPlaceforPrunedNode = function (nodeData) {\n\n  var gridForPrunedNode;\n  var nodeToConnect;\n  var prunedNode = nodeData[0];\n  if (prunedNode == nodeData[1].source) {\n    nodeToConnect = nodeData[1].target;\n  } else {\n    nodeToConnect = nodeData[1].source;\n  }\n  var startGridX = nodeToConnect.startX;\n  var finishGridX = nodeToConnect.finishX;\n  var startGridY = nodeToConnect.startY;\n  var finishGridY = nodeToConnect.finishY;\n\n  var upNodeCount = 0;\n  var downNodeCount = 0;\n  var rightNodeCount = 0;\n  var leftNodeCount = 0;\n  var controlRegions = [upNodeCount, rightNodeCount, downNodeCount, leftNodeCount];\n\n  if (startGridY > 0) {\n    for (var i = startGridX; i <= finishGridX; i++) {\n      controlRegions[0] += this.grid[i][startGridY - 1].length + this.grid[i][startGridY].length - 1;\n    }\n  }\n  if (finishGridX < this.grid.length - 1) {\n    for (var i = startGridY; i <= finishGridY; i++) {\n      controlRegions[1] += this.grid[finishGridX + 1][i].length + this.grid[finishGridX][i].length - 1;\n    }\n  }\n  if (finishGridY < this.grid[0].length - 1) {\n    for (var i = startGridX; i <= finishGridX; i++) {\n      controlRegions[2] += this.grid[i][finishGridY + 1].length + this.grid[i][finishGridY].length - 1;\n    }\n  }\n  if (startGridX > 0) {\n    for (var i = startGridY; i <= finishGridY; i++) {\n      controlRegions[3] += this.grid[startGridX - 1][i].length + this.grid[startGridX][i].length - 1;\n    }\n  }\n  var min = Integer.MAX_VALUE;\n  var minCount;\n  var minIndex;\n  for (var j = 0; j < controlRegions.length; j++) {\n    if (controlRegions[j] < min) {\n      min = controlRegions[j];\n      minCount = 1;\n      minIndex = j;\n    } else if (controlRegions[j] == min) {\n      minCount++;\n    }\n  }\n\n  if (minCount == 3 && min == 0) {\n    if (controlRegions[0] == 0 && controlRegions[1] == 0 && controlRegions[2] == 0) {\n      gridForPrunedNode = 1;\n    } else if (controlRegions[0] == 0 && controlRegions[1] == 0 && controlRegions[3] == 0) {\n      gridForPrunedNode = 0;\n    } else if (controlRegions[0] == 0 && controlRegions[2] == 0 && controlRegions[3] == 0) {\n      gridForPrunedNode = 3;\n    } else if (controlRegions[1] == 0 && controlRegions[2] == 0 && controlRegions[3] == 0) {\n      gridForPrunedNode = 2;\n    }\n  } else if (minCount == 2 && min == 0) {\n    var random = Math.floor(Math.random() * 2);\n    if (controlRegions[0] == 0 && controlRegions[1] == 0) {\n      ;\n      if (random == 0) {\n        gridForPrunedNode = 0;\n      } else {\n        gridForPrunedNode = 1;\n      }\n    } else if (controlRegions[0] == 0 && controlRegions[2] == 0) {\n      if (random == 0) {\n        gridForPrunedNode = 0;\n      } else {\n        gridForPrunedNode = 2;\n      }\n    } else if (controlRegions[0] == 0 && controlRegions[3] == 0) {\n      if (random == 0) {\n        gridForPrunedNode = 0;\n      } else {\n        gridForPrunedNode = 3;\n      }\n    } else if (controlRegions[1] == 0 && controlRegions[2] == 0) {\n      if (random == 0) {\n        gridForPrunedNode = 1;\n      } else {\n        gridForPrunedNode = 2;\n      }\n    } else if (controlRegions[1] == 0 && controlRegions[3] == 0) {\n      if (random == 0) {\n        gridForPrunedNode = 1;\n      } else {\n        gridForPrunedNode = 3;\n      }\n    } else {\n      if (random == 0) {\n        gridForPrunedNode = 2;\n      } else {\n        gridForPrunedNode = 3;\n      }\n    }\n  } else if (minCount == 4 && min == 0) {\n    var random = Math.floor(Math.random() * 4);\n    gridForPrunedNode = random;\n  } else {\n    gridForPrunedNode = minIndex;\n  }\n\n  if (gridForPrunedNode == 0) {\n    prunedNode.setCenter(nodeToConnect.getCenterX(), nodeToConnect.getCenterY() - nodeToConnect.getHeight() / 2 - FDLayoutConstants.DEFAULT_EDGE_LENGTH - prunedNode.getHeight() / 2);\n  } else if (gridForPrunedNode == 1) {\n    prunedNode.setCenter(nodeToConnect.getCenterX() + nodeToConnect.getWidth() / 2 + FDLayoutConstants.DEFAULT_EDGE_LENGTH + prunedNode.getWidth() / 2, nodeToConnect.getCenterY());\n  } else if (gridForPrunedNode == 2) {\n    prunedNode.setCenter(nodeToConnect.getCenterX(), nodeToConnect.getCenterY() + nodeToConnect.getHeight() / 2 + FDLayoutConstants.DEFAULT_EDGE_LENGTH + prunedNode.getHeight() / 2);\n  } else {\n    prunedNode.setCenter(nodeToConnect.getCenterX() - nodeToConnect.getWidth() / 2 - FDLayoutConstants.DEFAULT_EDGE_LENGTH - prunedNode.getWidth() / 2, nodeToConnect.getCenterY());\n  }\n};\n\nmodule.exports = CoSELayout;\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar coseBase = {};\n\ncoseBase.layoutBase = __webpack_require__(0);\ncoseBase.CoSEConstants = __webpack_require__(1);\ncoseBase.CoSEEdge = __webpack_require__(2);\ncoseBase.CoSEGraph = __webpack_require__(3);\ncoseBase.CoSEGraphManager = __webpack_require__(4);\ncoseBase.CoSELayout = __webpack_require__(6);\ncoseBase.CoSENode = __webpack_require__(5);\n\nmodule.exports = coseBase;\n\n/***/ })\n/******/ ]);\n});", "(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"cose-base\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"cose-base\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"cytoscapeCoseBilkent\"] = factory(require(\"cose-base\"));\n\telse\n\t\troot[\"cytoscapeCoseBilkent\"] = factory(root[\"coseBase\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar LayoutConstants = __webpack_require__(0).layoutBase.LayoutConstants;\nvar FDLayoutConstants = __webpack_require__(0).layoutBase.FDLayoutConstants;\nvar CoSEConstants = __webpack_require__(0).CoSEConstants;\nvar CoSELayout = __webpack_require__(0).CoSELayout;\nvar CoSENode = __webpack_require__(0).CoSENode;\nvar PointD = __webpack_require__(0).layoutBase.PointD;\nvar DimensionD = __webpack_require__(0).layoutBase.DimensionD;\n\nvar defaults = {\n  // Called on `layoutready`\n  ready: function ready() {},\n  // Called on `layoutstop`\n  stop: function stop() {},\n  // 'draft', 'default' or 'proof\" \n  // - 'draft' fast cooling rate \n  // - 'default' moderate cooling rate \n  // - \"proof\" slow cooling rate\n  quality: 'default',\n  // include labels in node dimensions\n  nodeDimensionsIncludeLabels: false,\n  // number of ticks per frame; higher is faster but more jerky\n  refresh: 30,\n  // Whether to fit the network view after when done\n  fit: true,\n  // Padding on fit\n  padding: 10,\n  // Whether to enable incremental mode\n  randomize: true,\n  // Node repulsion (non overlapping) multiplier\n  nodeRepulsion: 4500,\n  // Ideal edge (non nested) length\n  idealEdgeLength: 50,\n  // Divisor to compute edge forces\n  edgeElasticity: 0.45,\n  // Nesting factor (multiplier) to compute ideal edge length for nested edges\n  nestingFactor: 0.1,\n  // Gravity force (constant)\n  gravity: 0.25,\n  // Maximum number of iterations to perform\n  numIter: 2500,\n  // For enabling tiling\n  tile: true,\n  // Type of layout animation. The option set is {'during', 'end', false}\n  animate: 'end',\n  // Duration for animate:end\n  animationDuration: 500,\n  // Represents the amount of the vertical space to put between the zero degree members during the tiling operation(can also be a function)\n  tilingPaddingVertical: 10,\n  // Represents the amount of the horizontal space to put between the zero degree members during the tiling operation(can also be a function)\n  tilingPaddingHorizontal: 10,\n  // Gravity range (constant) for compounds\n  gravityRangeCompound: 1.5,\n  // Gravity force (constant) for compounds\n  gravityCompound: 1.0,\n  // Gravity range (constant)\n  gravityRange: 3.8,\n  // Initial cooling factor for incremental layout\n  initialEnergyOnIncremental: 0.5\n};\n\nfunction extend(defaults, options) {\n  var obj = {};\n\n  for (var i in defaults) {\n    obj[i] = defaults[i];\n  }\n\n  for (var i in options) {\n    obj[i] = options[i];\n  }\n\n  return obj;\n};\n\nfunction _CoSELayout(_options) {\n  this.options = extend(defaults, _options);\n  getUserOptions(this.options);\n}\n\nvar getUserOptions = function getUserOptions(options) {\n  if (options.nodeRepulsion != null) CoSEConstants.DEFAULT_REPULSION_STRENGTH = FDLayoutConstants.DEFAULT_REPULSION_STRENGTH = options.nodeRepulsion;\n  if (options.idealEdgeLength != null) CoSEConstants.DEFAULT_EDGE_LENGTH = FDLayoutConstants.DEFAULT_EDGE_LENGTH = options.idealEdgeLength;\n  if (options.edgeElasticity != null) CoSEConstants.DEFAULT_SPRING_STRENGTH = FDLayoutConstants.DEFAULT_SPRING_STRENGTH = options.edgeElasticity;\n  if (options.nestingFactor != null) CoSEConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = FDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = options.nestingFactor;\n  if (options.gravity != null) CoSEConstants.DEFAULT_GRAVITY_STRENGTH = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH = options.gravity;\n  if (options.numIter != null) CoSEConstants.MAX_ITERATIONS = FDLayoutConstants.MAX_ITERATIONS = options.numIter;\n  if (options.gravityRange != null) CoSEConstants.DEFAULT_GRAVITY_RANGE_FACTOR = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR = options.gravityRange;\n  if (options.gravityCompound != null) CoSEConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = options.gravityCompound;\n  if (options.gravityRangeCompound != null) CoSEConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = options.gravityRangeCompound;\n  if (options.initialEnergyOnIncremental != null) CoSEConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = options.initialEnergyOnIncremental;\n\n  if (options.quality == 'draft') LayoutConstants.QUALITY = 0;else if (options.quality == 'proof') LayoutConstants.QUALITY = 2;else LayoutConstants.QUALITY = 1;\n\n  CoSEConstants.NODE_DIMENSIONS_INCLUDE_LABELS = FDLayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = LayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = options.nodeDimensionsIncludeLabels;\n  CoSEConstants.DEFAULT_INCREMENTAL = FDLayoutConstants.DEFAULT_INCREMENTAL = LayoutConstants.DEFAULT_INCREMENTAL = !options.randomize;\n  CoSEConstants.ANIMATE = FDLayoutConstants.ANIMATE = LayoutConstants.ANIMATE = options.animate;\n  CoSEConstants.TILE = options.tile;\n  CoSEConstants.TILING_PADDING_VERTICAL = typeof options.tilingPaddingVertical === 'function' ? options.tilingPaddingVertical.call() : options.tilingPaddingVertical;\n  CoSEConstants.TILING_PADDING_HORIZONTAL = typeof options.tilingPaddingHorizontal === 'function' ? options.tilingPaddingHorizontal.call() : options.tilingPaddingHorizontal;\n};\n\n_CoSELayout.prototype.run = function () {\n  var ready;\n  var frameId;\n  var options = this.options;\n  var idToLNode = this.idToLNode = {};\n  var layout = this.layout = new CoSELayout();\n  var self = this;\n\n  self.stopped = false;\n\n  this.cy = this.options.cy;\n\n  this.cy.trigger({ type: 'layoutstart', layout: this });\n\n  var gm = layout.newGraphManager();\n  this.gm = gm;\n\n  var nodes = this.options.eles.nodes();\n  var edges = this.options.eles.edges();\n\n  this.root = gm.addRoot();\n  this.processChildrenList(this.root, this.getTopMostNodes(nodes), layout);\n\n  for (var i = 0; i < edges.length; i++) {\n    var edge = edges[i];\n    var sourceNode = this.idToLNode[edge.data(\"source\")];\n    var targetNode = this.idToLNode[edge.data(\"target\")];\n    if (sourceNode !== targetNode && sourceNode.getEdgesBetween(targetNode).length == 0) {\n      var e1 = gm.add(layout.newEdge(), sourceNode, targetNode);\n      e1.id = edge.id();\n    }\n  }\n\n  var getPositions = function getPositions(ele, i) {\n    if (typeof ele === \"number\") {\n      ele = i;\n    }\n    var theId = ele.data('id');\n    var lNode = self.idToLNode[theId];\n\n    return {\n      x: lNode.getRect().getCenterX(),\n      y: lNode.getRect().getCenterY()\n    };\n  };\n\n  /*\n   * Reposition nodes in iterations animatedly\n   */\n  var iterateAnimated = function iterateAnimated() {\n    // Thigs to perform after nodes are repositioned on screen\n    var afterReposition = function afterReposition() {\n      if (options.fit) {\n        options.cy.fit(options.eles, options.padding);\n      }\n\n      if (!ready) {\n        ready = true;\n        self.cy.one('layoutready', options.ready);\n        self.cy.trigger({ type: 'layoutready', layout: self });\n      }\n    };\n\n    var ticksPerFrame = self.options.refresh;\n    var isDone;\n\n    for (var i = 0; i < ticksPerFrame && !isDone; i++) {\n      isDone = self.stopped || self.layout.tick();\n    }\n\n    // If layout is done\n    if (isDone) {\n      // If the layout is not a sublayout and it is successful perform post layout.\n      if (layout.checkLayoutSuccess() && !layout.isSubLayout) {\n        layout.doPostLayout();\n      }\n\n      // If layout has a tilingPostLayout function property call it.\n      if (layout.tilingPostLayout) {\n        layout.tilingPostLayout();\n      }\n\n      layout.isLayoutFinished = true;\n\n      self.options.eles.nodes().positions(getPositions);\n\n      afterReposition();\n\n      // trigger layoutstop when the layout stops (e.g. finishes)\n      self.cy.one('layoutstop', self.options.stop);\n      self.cy.trigger({ type: 'layoutstop', layout: self });\n\n      if (frameId) {\n        cancelAnimationFrame(frameId);\n      }\n\n      ready = false;\n      return;\n    }\n\n    var animationData = self.layout.getPositionsData(); // Get positions of layout nodes note that all nodes may not be layout nodes because of tiling\n\n    // Position nodes, for the nodes whose id does not included in data (because they are removed from their parents and included in dummy compounds)\n    // use position of their ancestors or dummy ancestors\n    options.eles.nodes().positions(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n      // If ele is a compound node, then its position will be defined by its children\n      if (!ele.isParent()) {\n        var theId = ele.id();\n        var pNode = animationData[theId];\n        var temp = ele;\n        // If pNode is undefined search until finding position data of its first ancestor (It may be dummy as well)\n        while (pNode == null) {\n          pNode = animationData[temp.data('parent')] || animationData['DummyCompound_' + temp.data('parent')];\n          animationData[theId] = pNode;\n          temp = temp.parent()[0];\n          if (temp == undefined) {\n            break;\n          }\n        }\n        if (pNode != null) {\n          return {\n            x: pNode.x,\n            y: pNode.y\n          };\n        } else {\n          return {\n            x: ele.position('x'),\n            y: ele.position('y')\n          };\n        }\n      }\n    });\n\n    afterReposition();\n\n    frameId = requestAnimationFrame(iterateAnimated);\n  };\n\n  /*\n  * Listen 'layoutstarted' event and start animated iteration if animate option is 'during'\n  */\n  layout.addListener('layoutstarted', function () {\n    if (self.options.animate === 'during') {\n      frameId = requestAnimationFrame(iterateAnimated);\n    }\n  });\n\n  layout.runLayout(); // Run cose layout\n\n  /*\n   * If animate option is not 'during' ('end' or false) perform these here (If it is 'during' similar things are already performed)\n   */\n  if (this.options.animate !== \"during\") {\n    self.options.eles.nodes().not(\":parent\").layoutPositions(self, self.options, getPositions); // Use layout positions to reposition the nodes it considers the options parameter\n    ready = false;\n  }\n\n  return this; // chaining\n};\n\n//Get the top most ones of a list of nodes\n_CoSELayout.prototype.getTopMostNodes = function (nodes) {\n  var nodesMap = {};\n  for (var i = 0; i < nodes.length; i++) {\n    nodesMap[nodes[i].id()] = true;\n  }\n  var roots = nodes.filter(function (ele, i) {\n    if (typeof ele === \"number\") {\n      ele = i;\n    }\n    var parent = ele.parent()[0];\n    while (parent != null) {\n      if (nodesMap[parent.id()]) {\n        return false;\n      }\n      parent = parent.parent()[0];\n    }\n    return true;\n  });\n\n  return roots;\n};\n\n_CoSELayout.prototype.processChildrenList = function (parent, children, layout) {\n  var size = children.length;\n  for (var i = 0; i < size; i++) {\n    var theChild = children[i];\n    var children_of_children = theChild.children();\n    var theNode;\n\n    var dimensions = theChild.layoutDimensions({\n      nodeDimensionsIncludeLabels: this.options.nodeDimensionsIncludeLabels\n    });\n\n    if (theChild.outerWidth() != null && theChild.outerHeight() != null) {\n      theNode = parent.add(new CoSENode(layout.graphManager, new PointD(theChild.position('x') - dimensions.w / 2, theChild.position('y') - dimensions.h / 2), new DimensionD(parseFloat(dimensions.w), parseFloat(dimensions.h))));\n    } else {\n      theNode = parent.add(new CoSENode(this.graphManager));\n    }\n    // Attach id to the layout node\n    theNode.id = theChild.data(\"id\");\n    // Attach the paddings of cy node to layout node\n    theNode.paddingLeft = parseInt(theChild.css('padding'));\n    theNode.paddingTop = parseInt(theChild.css('padding'));\n    theNode.paddingRight = parseInt(theChild.css('padding'));\n    theNode.paddingBottom = parseInt(theChild.css('padding'));\n\n    //Attach the label properties to compound if labels will be included in node dimensions  \n    if (this.options.nodeDimensionsIncludeLabels) {\n      if (theChild.isParent()) {\n        var labelWidth = theChild.boundingBox({ includeLabels: true, includeNodes: false }).w;\n        var labelHeight = theChild.boundingBox({ includeLabels: true, includeNodes: false }).h;\n        var labelPos = theChild.css(\"text-halign\");\n        theNode.labelWidth = labelWidth;\n        theNode.labelHeight = labelHeight;\n        theNode.labelPos = labelPos;\n      }\n    }\n\n    // Map the layout node\n    this.idToLNode[theChild.data(\"id\")] = theNode;\n\n    if (isNaN(theNode.rect.x)) {\n      theNode.rect.x = 0;\n    }\n\n    if (isNaN(theNode.rect.y)) {\n      theNode.rect.y = 0;\n    }\n\n    if (children_of_children != null && children_of_children.length > 0) {\n      var theNewGraph;\n      theNewGraph = layout.getGraphManager().add(layout.newGraph(), theNode);\n      this.processChildrenList(theNewGraph, children_of_children, layout);\n    }\n  }\n};\n\n/**\n * @brief : called on continuous layouts to stop them before they finish\n */\n_CoSELayout.prototype.stop = function () {\n  this.stopped = true;\n\n  return this; // chaining\n};\n\nvar register = function register(cytoscape) {\n  //  var Layout = getLayout( cytoscape );\n\n  cytoscape('layout', 'cose-bilkent', _CoSELayout);\n};\n\n// auto reg for globals\nif (typeof cytoscape !== 'undefined') {\n  register(cytoscape);\n}\n\nmodule.exports = register;\n\n/***/ })\n/******/ ]);\n});"],
  "mappings": "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",
  "names": ["module", "exports", "edge", "Point", "instance", "nodeFrom", "add", "next", "_remove", "LinkedList", "Layout", "DimensionD", "Quicksort", "NeedlemanWunsch", "layoutBase", "module", "exports", "pred1", "next", "processed", "Point", "Layout", "edge", "p_id", "parent", "i", "node", "module", "exports", "DimensionD", "defaults", "getUserOptions", "getPositions", "i", "iterateAnimated", "afterReposition", "register", "cytoscape"]
}
